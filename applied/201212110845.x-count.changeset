Changeset created on Tue Dec 11 08:45:38 UTC 2012 by Seecr (Seek You Too B.V.)

Description: Introduced optional diagnostics-only 'x-count' argument on OAI-PMH List* verbs.

    When x-count=True is added to a ListRecords or ListIdentifiers OAI query, the remaining
    number of records is calculated and included as an attribute on the resumptionToken element
    in the response. Note: as this calculation is inherently slow, this should only be used
    for diagnositics, NOT as part of a regular harvesting process!

Baseline version: 4.1.1

From a57796cc61eb0a2758b4d2e9dc8cefd6d1c5ca0e Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Thu, 6 Dec 2012 10:06:33 +0000
Subject: [PATCH 3/6] JPM: introducing x-count argument that results in 'recordsRemaining' attribute on resumptionToken element

---
 meresco/oai/oailist.py |   22 ++++++++++++++--------
 test/oailisttest.py    |   17 +++++++++++++++++
 2 files changed, 31 insertions(+), 8 deletions(-)

diff --git a/meresco/oai/oailist.py b/meresco/oai/oailist.py
index bd5dc2e..31e7fb5 100644
--- a/meresco/oai/oailist.py
+++ b/meresco/oai/oailist.py
@@ -137,6 +137,9 @@ Error and Exception Conditions
             checkArgument(arguments, 'x-wait', validatedArguments)
             if validatedArguments.get('x-wait', None) not in ['True', None]:
                 raise OaiBadArgumentException("The argument 'x-wait' only supports 'True' as valid value.")
+        checkArgument(arguments, 'x-count', validatedArguments)
+        if validatedArguments.get('x-count', None) not in ['True', None]:
+            raise OaiBadArgumentException("The argument 'x-count' only supports 'True' as valid value.")
         if checkArgument(arguments, 'resumptionToken', validatedArguments):
             if len(arguments) > 0:
                 raise OaiBadArgumentException('"resumptionToken" argument may only be used exclusively.')
@@ -203,19 +206,22 @@ Error and Exception Conditions
             yield self.all.unknown(message, recordId=recordId, metadataPrefix=validatedArguments['metadataPrefix'])
 
         try:
+            recordsRemaining = 0
             if not 'x-wait' in validatedArguments:
                 results.next()
-            yield '<resumptionToken>%s</resumptionToken>' % ResumptionToken(
+                recordsRemaining += 1
+            if 'x-count' in validatedArguments:
+                recordsRemaining += sum(1 for result in results)
+                yield '<resumptionToken recordsRemaining="%s">' % recordsRemaining
+            else:
+                yield '<resumptionToken>'
+            yield '%s</resumptionToken>' % ResumptionToken(
                     metadataPrefix=validatedArguments['metadataPrefix'],
                     continueAfter=self.call.getUnique(recordId),
                     from_=validatedArguments['from'],
                     until=validatedArguments['until'],
-                    set_=validatedArguments['set']
-                )
-            return
+                    set_=validatedArguments['set'])
         except StopIteration:
-            pass
-
-        if 'resumptionToken' in validatedArguments:
-            yield '<resumptionToken/>'
+            if 'resumptionToken' in validatedArguments:
+                yield '<resumptionToken/>'
 
diff --git a/test/oailisttest.py b/test/oailisttest.py
index 65e0e0a..76224fb 100644
--- a/test/oailisttest.py
+++ b/test/oailisttest.py
@@ -275,6 +275,23 @@ class OaiListTest(SeecrTestCase):
         self.assertFalse('</ListIdentifiers>' in body, body)
         self.assertTrue('</ListRecords>' in body, body)
 
+    def testXCount(self):
+        self.observer.returnValues['getUnique'] = 'unique_for_id'
+        self.observer.returnValues['oaiSelect'] = ('id%s&%s' % (i, i) for i in xrange(1000))
+
+        header, body = ''.join(compose(self.oaiList.listRecords(arguments={'verb': ['ListRecords'], 'metadataPrefix': ['oai_dc'], 'from': ['2000-01-01T00:00:00Z'], 'until': ['2012-01-01T00:00:00Z'], 'set': ['set0'], 'x-count': ['True']}, **self.httpkwargs))).split(CRLF*2)
+        oai = parse(StringIO(body))
+        self.assertEquals(2, len(xpath(oai, '/oai:OAI-PMH/oai:ListRecords/mock:record')))
+        recordsRemaining = xpath(oai, '/oai:OAI-PMH/oai:ListRecords/oai:resumptionToken/@recordsRemaining')[0]
+        self.assertEquals('998', recordsRemaining)
+        resumptionToken = xpath(oai, '/oai:OAI-PMH/oai:ListRecords/oai:resumptionToken/text()')[0]
+        self.observer.returnValues['oaiSelect'] = (f for f in ['id:999&999'])
+        header, body = ''.join(compose(self.oaiList.listRecords(arguments={'verb': ['ListRecords'], 'resumptionToken': [resumptionToken], 'x-count': ['True']}, **self.httpkwargs))).split(CRLF*2)
+        oai = parse(StringIO(body))
+        self.assertEquals(0, len(xpath(oai, '/oai:OAI-PMH/oai:ListRecords/oai:resumptionToken/@recordsRemaining')))
+
+
+
 def xpath(node, path):
     return node.xpath(path, namespaces={'oai': 'http://www.openarchives.org/OAI/2.0/',
         'mock': 'uri:mock',})
-- 
1.7.1


From 1471fc3509cadf84c70ee2c2338f3a99fb4b0989 Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Fri, 7 Dec 2012 12:55:30 +0000
Subject: [PATCH 4/6] TS/JPM: suppressing deprecation warning in test output

---
 test/oaisetselecttest.py |   16 +++++++++++-----
 1 files changed, 11 insertions(+), 5 deletions(-)

diff --git a/test/oaisetselecttest.py b/test/oaisetselecttest.py
index b0e01f7..e1d6bed 100644
--- a/test/oaisetselecttest.py
+++ b/test/oaisetselecttest.py
@@ -29,23 +29,29 @@
 ## end license ##
 
 from seecr.test import SeecrTestCase, CallTrace
+from seecr.test.io import stderr_replaced
 
 from meresco.core import Observable
 from meresco.oai import OaiSetSelect
 from weightless.core import be, compose
 
+
 class OaiSetSelectTest(SeecrTestCase):
     def setUp(self):
         SeecrTestCase.setUp(self)
         self.observer = CallTrace()
 
-        self.dna = be(
-            (Observable(),
-                (OaiSetSelect(['set1', 'set2']),
-                    (self.observer,)
+        with stderr_replaced() as err:
+            self.dna = be(
+                (Observable(),
+                    (OaiSetSelect(['set1', 'set2']),
+                        (self.observer,)
+                    )
                 )
             )
-        )
+            self.assertTrue(not err.getvalue() or \
+                'warn("OaiSetSelect is deprecated;' in err.getvalue(), err.getvalue())
+
 
     def testOaiSelect(self):
         self.dna.call.oaiSelect()
-- 
1.7.1


From 9c251deb31d97b62820164f2d053076da3483f94 Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Fri, 7 Dec 2012 16:03:04 +0000
Subject: [PATCH 5/6] TS/JPM: yield Yield when counting recordsRemaining (x-count)

---
 meresco/oai/oailist.py |    6 +++++-
 test/oailisttest.py    |    6 +++---
 2 files changed, 8 insertions(+), 4 deletions(-)

diff --git a/meresco/oai/oailist.py b/meresco/oai/oailist.py
index 31e7fb5..c34334e 100644
--- a/meresco/oai/oailist.py
+++ b/meresco/oai/oailist.py
@@ -30,6 +30,7 @@
 # 
 ## end license ##
 
+from weightless.core import Yield
 from meresco.core.observable import Observable
 
 from resumptiontoken import resumptionTokenFromString, ResumptionToken
@@ -211,7 +212,10 @@ Error and Exception Conditions
                 results.next()
                 recordsRemaining += 1
             if 'x-count' in validatedArguments:
-                recordsRemaining += sum(1 for result in results)
+                for i, result in enumerate(results):
+                    if i % 100 == 0:
+                        yield Yield
+                    recordsRemaining += 1
                 yield '<resumptionToken recordsRemaining="%s">' % recordsRemaining
             else:
                 yield '<resumptionToken>'
diff --git a/test/oailisttest.py b/test/oailisttest.py
index 76224fb..22ab646 100644
--- a/test/oailisttest.py
+++ b/test/oailisttest.py
@@ -37,7 +37,7 @@ from lxml.etree import parse
 
 from seecr.test import SeecrTestCase, CallTrace
 
-from weightless.core import compose
+from weightless.core import compose, Yield
 from meresco.components.http.utils import CRLF
 
 from meresco.oai.oailist import OaiList
@@ -279,14 +279,14 @@ class OaiListTest(SeecrTestCase):
         self.observer.returnValues['getUnique'] = 'unique_for_id'
         self.observer.returnValues['oaiSelect'] = ('id%s&%s' % (i, i) for i in xrange(1000))
 
-        header, body = ''.join(compose(self.oaiList.listRecords(arguments={'verb': ['ListRecords'], 'metadataPrefix': ['oai_dc'], 'from': ['2000-01-01T00:00:00Z'], 'until': ['2012-01-01T00:00:00Z'], 'set': ['set0'], 'x-count': ['True']}, **self.httpkwargs))).split(CRLF*2)
+        header, body = ''.join(s for s in compose(self.oaiList.listRecords(arguments={'verb': ['ListRecords'], 'metadataPrefix': ['oai_dc'], 'from': ['2000-01-01T00:00:00Z'], 'until': ['2012-01-01T00:00:00Z'], 'set': ['set0'], 'x-count': ['True']}, **self.httpkwargs)) if not s is Yield).split(CRLF*2)
         oai = parse(StringIO(body))
         self.assertEquals(2, len(xpath(oai, '/oai:OAI-PMH/oai:ListRecords/mock:record')))
         recordsRemaining = xpath(oai, '/oai:OAI-PMH/oai:ListRecords/oai:resumptionToken/@recordsRemaining')[0]
         self.assertEquals('998', recordsRemaining)
         resumptionToken = xpath(oai, '/oai:OAI-PMH/oai:ListRecords/oai:resumptionToken/text()')[0]
         self.observer.returnValues['oaiSelect'] = (f for f in ['id:999&999'])
-        header, body = ''.join(compose(self.oaiList.listRecords(arguments={'verb': ['ListRecords'], 'resumptionToken': [resumptionToken], 'x-count': ['True']}, **self.httpkwargs))).split(CRLF*2)
+        header, body = ''.join(s for s in compose(self.oaiList.listRecords(arguments={'verb': ['ListRecords'], 'resumptionToken': [resumptionToken], 'x-count': ['True']}, **self.httpkwargs)) if not s is Yield).split(CRLF*2)
         oai = parse(StringIO(body))
         self.assertEquals(0, len(xpath(oai, '/oai:OAI-PMH/oai:ListRecords/oai:resumptionToken/@recordsRemaining')))
 
-- 
1.7.1


From ffa14905202b52e1e87d6d3bf0b766e57f79546e Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Mon, 10 Dec 2012 23:11:16 +0000
Subject: [PATCH 6/6] JPM: minor simplifying refactorings

---
 meresco/oai/oaijazz.py |    9 ++++-----
 meresco/oai/oailist.py |    4 ++--
 2 files changed, 6 insertions(+), 7 deletions(-)

diff --git a/meresco/oai/oaijazz.py b/meresco/oai/oaijazz.py
index 1b6aeee..b92413d 100644
--- a/meresco/oai/oaijazz.py
+++ b/meresco/oai/oaijazz.py
@@ -50,8 +50,7 @@ from weightless.io import Suspend
 
 MERGE_TRIGGER = 1000
 SETSPEC_SEPARATOR = ','
-DATESTAMP_FACTOR, DATESTAMP_FACTOR_FLOAT = 1000000, 1000000.0
-
+DATESTAMP_FACTOR = 1000000
 
 class OaiJazz(object):
 
@@ -330,7 +329,7 @@ class OaiJazz(object):
     @staticmethod
     def _timeToNumber(time):
         try:
-            return int(timegm(strptime(time, '%Y-%m-%dT%H:%M:%SZ'))*DATESTAMP_FACTOR_FLOAT)
+            return int(timegm(strptime(time, '%Y-%m-%dT%H:%M:%SZ')) * DATESTAMP_FACTOR)
         except (ValueError, OverflowError):
             return maxint * DATESTAMP_FACTOR
 
@@ -350,7 +349,7 @@ class OaiJazz(object):
 
     def _newStamp(self):
         """time in microseconds"""
-        newStamp = int(time() * DATESTAMP_FACTOR_FLOAT)
+        newStamp = int(time() * DATESTAMP_FACTOR)
         if newStamp <= self._newestStamp:
             raise ValueError("Timestamp error: new stamp '%s' lower than existing ('%s')" % (newStamp, self._newestStamp))
         return newStamp
@@ -419,7 +418,7 @@ def stamp2zulutime(stamp):
 
 def _stamp2zulutime(stamp, preciseDatestamp=False):
     microseconds = ".%s" % (stamp % DATESTAMP_FACTOR) if preciseDatestamp else ""
-    return "%s%sZ" % (strftime('%Y-%m-%dT%H:%M:%S', gmtime(stamp/DATESTAMP_FACTOR_FLOAT)), microseconds)
+    return "%s%sZ" % (strftime('%Y-%m-%dT%H:%M:%S', gmtime(stamp / DATESTAMP_FACTOR)), microseconds)
 
 def _ensureDir(directory):
     isdir(directory) or makedirs(directory) 
diff --git a/meresco/oai/oailist.py b/meresco/oai/oailist.py
index c34334e..c84b45a 100644
--- a/meresco/oai/oailist.py
+++ b/meresco/oai/oailist.py
@@ -212,8 +212,8 @@ Error and Exception Conditions
                 results.next()
                 recordsRemaining += 1
             if 'x-count' in validatedArguments:
-                for i, result in enumerate(results):
-                    if i % 100 == 0:
+                for result in results:
+                    if recordsRemaining % 100 == 0:
                         yield Yield
                     recordsRemaining += 1
                 yield '<resumptionToken recordsRemaining="%s">' % recordsRemaining
-- 
1.7.1

