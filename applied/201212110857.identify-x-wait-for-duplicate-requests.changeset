Changeset created on Tue Dec 11 08:57:50 UTC 2012 by Seecr (Seek You Too B.V.)

Description: Identify x-wait for duplicate requests

    Clients using x-wait option when connecting to an Oai-Service, will now
    send an additional X-Meresco-Oai-Client-Identifier header.  This allows
    the service to detect duplicate pending requests (this should not normally
    occur); and gives an error on the old request.

Baseline version: master

From b5424ee09595d6d019150f4fc0ff4ab27f25ebe4 Mon Sep 17 00:00:00 2001
From: Hendrik Moree <hendrik@seecr.nl>
Date: Mon, 10 Dec 2012 14:46:53 +0100
Subject: [PATCH 1/3] TS/HM: X-Meresco-Oai-Client-Identifier HTTP header for xWait calls

Only one request per oaiDownloadProcessor (client) will be suspended. Previous (hanging) request will be resumed with an internal server error.
---
 meresco/oai/oaidownloadprocessor.py |   22 ++++++++-------
 meresco/oai/oaijazz.py              |   11 +++++---
 meresco/oai/oailist.py              |    8 +++++-
 test/oaidownloadprocessortest.py    |   45 ++++++++++++++++++--------------
 test/oaiintegrationtest.py          |   48 +++++++++++++++++++++++++++++++++++
 test/oaijazztest.py                 |   28 ++++++++++++++++----
 test/oailisttest.py                 |   15 ++++++----
 7 files changed, 130 insertions(+), 47 deletions(-)

diff --git a/meresco/oai/oaidownloadprocessor.py b/meresco/oai/oaidownloadprocessor.py
index 35d4f72..57e686d 100644
--- a/meresco/oai/oaidownloadprocessor.py
+++ b/meresco/oai/oaidownloadprocessor.py
@@ -28,24 +28,21 @@
 ## end license ##
 
 from lxml.etree import ElementTree
-from StringIO import StringIO
 from traceback import format_exc
-from os import makedirs, close, remove
+from os import makedirs
 from os.path import join, isfile, isdir
 from urllib import urlencode
 
 from meresco.core import Observable
-from meresco.components.http.utils import CRLF
 try:
     from meresco.components import lxmltostring
 except ImportError:
     from lxml.etree import tostring
     lxmltostring = lambda x: tostring(x, encoding="UTF-8")
 
-from sys import stderr, stdout
-from time import time
-from tempfile import mkstemp
 from simplejson import dump, loads
+from uuid import uuid4
+from sys import stderr
 
 
 namespaces = {'oai': "http://www.openarchives.org/OAI/2.0/"}
@@ -64,6 +61,12 @@ class OaiDownloadProcessor(Observable):
         isdir(workingDirectory) or makedirs(workingDirectory)
         self._stateFilePath = join(workingDirectory, "harvester.state")
         self._readState()
+        self._identifierFilePath = join(workingDirectory, "harvester.identifier")
+        if isfile(self._identifierFilePath):
+            self._identifier = open(self._identifierFilePath).read().strip()
+        else:
+            self._identifier = str(uuid4())
+            open(self._identifierFilePath, 'w').write(self._identifier)
 
     def buildRequest(self):
         arguments = [('verb', self._verb)]
@@ -75,8 +78,9 @@ class OaiDownloadProcessor(Observable):
                 arguments.append(('set', self._set))
         if self._xWait:
             arguments.append(('x-wait', 'True'))
-        statusline = "GET %s?%s HTTP/1.0\r\n\r\n"
-        return statusline % (self._path, urlencode(arguments))
+        request = "GET %s?%s HTTP/1.0\r\n%s\r\n"
+        headers = "X-Meresco-Oai-Client-Identifier: %s\r\n" % self._identifier
+        return request % (self._path, urlencode(arguments), headers)
 
     def handle(self, lxmlNode):
         errors = xpath(lxmlNode, "/oai:OAI-PMH/oai:error")
@@ -129,8 +133,6 @@ class OaiDownloadProcessor(Observable):
             self._resumptionToken = d['resumptionToken']
             self._errorState = d['errorState']
 
-
-
     def _logError(self, message):
         self._err.write(message)
         if not message.endswith('\n'):
diff --git a/meresco/oai/oaijazz.py b/meresco/oai/oaijazz.py
index b92413d..b3abcf9 100644
--- a/meresco/oai/oaijazz.py
+++ b/meresco/oai/oaijazz.py
@@ -63,7 +63,7 @@ class OaiJazz(object):
         self._preciseDatestamp = preciseDatestamp
         self._persistentDelete = persistentDelete
         self._name = name
-        self._suspended = []
+        self._suspended = {}
 
         self._stamp2identifier = btopen(join(aDirectory, 'stamp2identifier.bd'))
         self._tombStones = PersistentSortedIntegerList(
@@ -213,9 +213,11 @@ class OaiJazz(object):
     def getDeletedRecordType(self):
         return "persistent" if self._persistentDelete else "transient"
 
-    def suspend(self):
+    def suspend(self, clientIdentifier):
         suspend = Suspend()
-        self._suspended.append(suspend) 
+        if clientIdentifier in self._suspended:
+            self._suspended.pop(clientIdentifier).throw(exc_type=ValueError, exc_value=ValueError("Aborting suspended request because of new request for the same OaiClient with identifier: %s." % clientIdentifier), exc_traceback=None)
+        self._suspended[clientIdentifier] = suspend 
         yield suspend
         suspend.getResult()
 
@@ -365,7 +367,8 @@ class OaiJazz(object):
 
     def _resume(self):
         while len(self._suspended) > 0:
-            self._suspended.pop().resume()
+            clientId, suspend = self._suspended.popitem()
+            suspend.resume()
 
     def _removeIfInList(self, item, l):
         try:
diff --git a/meresco/oai/oailist.py b/meresco/oai/oailist.py
index c84b45a..c5cf0ad 100644
--- a/meresco/oai/oailist.py
+++ b/meresco/oai/oailist.py
@@ -31,6 +31,7 @@
 ## end license ##
 
 from weightless.core import Yield
+from meresco.components.http.utils import serverErrorPlainText
 from meresco.core.observable import Observable
 
 from resumptiontoken import resumptionTokenFromString, ResumptionToken
@@ -116,7 +117,12 @@ Error and Exception Conditions
             except OaiException, e:
                 if validatedArguments.get("x-wait", 'False') == 'True' and \
                         e.statusCode in ["noRecordsMatch", "cannotDisseminateFormat"]:
-                    yield self.any.suspend()
+                    clientId = httpkwargs['Headers']['X-Meresco-Oai-Client-Identifier']
+                    try:
+                        yield self.any.suspend(clientIdentifier=clientId)
+                    except Exception, e:
+                        yield serverErrorPlainText + str(e)
+                        raise e
                 else:
                     yield oaiError(e.statusCode, e.additionalMessage, arguments, **httpkwargs)
                     return
diff --git a/test/oaidownloadprocessortest.py b/test/oaidownloadprocessortest.py
index 11189cb..15e2fec 100644
--- a/test/oaidownloadprocessortest.py
+++ b/test/oaidownloadprocessortest.py
@@ -27,45 +27,38 @@
 # 
 ## end license ##
 
-from contextlib import contextmanager
-from random import randint
-from threading import Event, Thread
-from time import sleep
-from socket import socket, error as SocketError
 from lxml.etree import parse
 from meresco.components import lxmltostring
 from StringIO import StringIO
-from os.path import join
+from os.path import join, isfile
 from urllib import urlencode
 
 from seecr.test import SeecrTestCase, CallTrace
-
-from weightless.core import be, compose
+from weightless.core import compose
 from weightless.io import Suspend
 
-from meresco.core import Observable, asyncreturn
-from meresco.components.http.utils import CRLF
+from meresco.core import asyncreturn
 from meresco.oai import OaiDownloadProcessor
 
 
 class OaiDownloadProcessorTest(SeecrTestCase):
     def testRequest(self):
         oaiDownloadProcessor = OaiDownloadProcessor(path="/oai", metadataPrefix="oai_dc", workingDirectory=self.tempdir, xWait=True)
-        self.assertEquals("""GET /oai?verb=ListRecords&metadataPrefix=oai_dc&x-wait=True HTTP/1.0\r\n\r\n""", oaiDownloadProcessor.buildRequest())
+        self.assertEquals("""GET /oai?verb=ListRecords&metadataPrefix=oai_dc&x-wait=True HTTP/1.0\r\nX-Meresco-Oai-Client-Identifier: %s\r\n\r\n""" % oaiDownloadProcessor._identifier, oaiDownloadProcessor.buildRequest())
 
     def testListIdentifiersRequest(self):
         oaiDownloadProcessor = OaiDownloadProcessor(path="/oai", metadataPrefix="oai_dc", workingDirectory=self.tempdir, xWait=True, verb='ListIdentifiers')
-        self.assertEquals("""GET /oai?verb=ListIdentifiers&metadataPrefix=oai_dc&x-wait=True HTTP/1.0\r\n\r\n""", oaiDownloadProcessor.buildRequest())
+        self.assertEquals("""GET /oai?verb=ListIdentifiers&metadataPrefix=oai_dc&x-wait=True HTTP/1.0\r\nX-Meresco-Oai-Client-Identifier: %s\r\n\r\n""" % oaiDownloadProcessor._identifier, oaiDownloadProcessor.buildRequest())
 
     def testSetInRequest(self):
         oaiDownloadProcessor = OaiDownloadProcessor(path="/oai", metadataPrefix="oai_dc", set="setName", workingDirectory=self.tempdir, xWait=True)
-        self.assertEquals("""GET /oai?verb=ListRecords&metadataPrefix=oai_dc&set=setName&x-wait=True HTTP/1.0\r\n\r\n""", oaiDownloadProcessor.buildRequest())
+        self.assertEquals("""GET /oai?verb=ListRecords&metadataPrefix=oai_dc&set=setName&x-wait=True HTTP/1.0\r\nX-Meresco-Oai-Client-Identifier: %s\r\n\r\n""" % oaiDownloadProcessor._identifier, oaiDownloadProcessor.buildRequest())
         oaiDownloadProcessor = OaiDownloadProcessor(path="/oai", metadataPrefix="oai_dc", set="set-_.!~*'()", workingDirectory=self.tempdir, xWait=True)
-        self.assertEquals("""GET /oai?verb=ListRecords&metadataPrefix=oai_dc&set=set-_.%21%7E%2A%27%28%29&x-wait=True HTTP/1.0\r\n\r\n""", oaiDownloadProcessor.buildRequest())
+        self.assertEquals("""GET /oai?verb=ListRecords&metadataPrefix=oai_dc&set=set-_.%%21%%7E%%2A%%27%%28%%29&x-wait=True HTTP/1.0\r\nX-Meresco-Oai-Client-Identifier: %s\r\n\r\n""" % oaiDownloadProcessor._identifier, oaiDownloadProcessor.buildRequest())
         resumptionToken = "u|c1286437597991025|mprefix|s|f"
         open(join(self.tempdir, 'harvester.state'), 'w').write("Resumptiontoken: %s\n" % resumptionToken)
         oaiDownloadProcessor = OaiDownloadProcessor(path="/oai", metadataPrefix="oai_dc", set="setName", workingDirectory=self.tempdir, xWait=True)
-        self.assertEquals("""GET /oai?verb=ListRecords&resumptionToken=u%7Cc1286437597991025%7Cmprefix%7Cs%7Cf&x-wait=True HTTP/1.0\r\n\r\n""", oaiDownloadProcessor.buildRequest())
+        self.assertEquals("""GET /oai?verb=ListRecords&resumptionToken=u%%7Cc1286437597991025%%7Cmprefix%%7Cs%%7Cf&x-wait=True HTTP/1.0\r\nX-Meresco-Oai-Client-Identifier: %s\r\n\r\n""" % oaiDownloadProcessor._identifier, oaiDownloadProcessor.buildRequest())
 
     def testHandle(self): 
         observer = CallTrace(methods={'add': lambda **kwargs: (x for x in [])})
@@ -119,11 +112,11 @@ class OaiDownloadProcessorTest(SeecrTestCase):
         observer = CallTrace()
         oaiDownloadProcessor = OaiDownloadProcessor(path="/oai", metadataPrefix="oai_dc", workingDirectory=self.tempdir, xWait=True, err=StringIO())
         oaiDownloadProcessor.addObserver(observer)
-        self.assertEquals('GET /oai?%s HTTP/1.0\r\n\r\n' % urlencode([('verb', 'ListRecords'), ('resumptionToken', resumptionToken), ('x-wait', 'True')]), oaiDownloadProcessor.buildRequest())
+        self.assertEquals('GET /oai?%s HTTP/1.0\r\nX-Meresco-Oai-Client-Identifier: %s\r\n\r\n' % (urlencode([('verb', 'ListRecords'), ('resumptionToken', resumptionToken), ('x-wait', 'True')]), oaiDownloadProcessor._identifier), oaiDownloadProcessor.buildRequest())
         list(oaiDownloadProcessor.handle(parse(StringIO(ERROR_RESPONSE))))
         self.assertEquals(0, len(observer.calledMethods))
         self.assertEquals("someError: Some error occurred.\n", oaiDownloadProcessor._err.getvalue())
-        self.assertEquals('GET /oai?%s HTTP/1.0\r\n\r\n' % urlencode([('verb', 'ListRecords'), ('metadataPrefix', 'oai_dc'), ('x-wait', 'True')]), oaiDownloadProcessor.buildRequest())
+        self.assertEquals('GET /oai?%s HTTP/1.0\r\nX-Meresco-Oai-Client-Identifier: %s\r\n\r\n' % (urlencode([('verb', 'ListRecords'), ('metadataPrefix', 'oai_dc'), ('x-wait', 'True')]), oaiDownloadProcessor._identifier), oaiDownloadProcessor.buildRequest())
 
     def testUseResumptionToken(self):
         observer = CallTrace()
@@ -131,7 +124,7 @@ class OaiDownloadProcessorTest(SeecrTestCase):
         oaiDownloadProcessor.addObserver(observer)
         list(oaiDownloadProcessor.handle(parse(StringIO(LISTRECORDS_RESPONSE % RESUMPTION_TOKEN))))
         self.assertEquals('x?y&z', oaiDownloadProcessor._resumptionToken)
-        self.assertEquals('GET /oai?verb=ListRecords&resumptionToken=x%3Fy%26z&x-wait=True HTTP/1.0\r\n\r\n', oaiDownloadProcessor.buildRequest())
+        self.assertEquals('GET /oai?verb=ListRecords&resumptionToken=x%%3Fy%%26z&x-wait=True HTTP/1.0\r\nX-Meresco-Oai-Client-Identifier: %s\r\n\r\n' % oaiDownloadProcessor._identifier, oaiDownloadProcessor.buildRequest())
         oaiDownloadProcessor = OaiDownloadProcessor(path="/oai", metadataPrefix="oai_dc", workingDirectory=self.tempdir, xWait=True, err=StringIO())
         self.assertEquals('x?y&z', oaiDownloadProcessor._resumptionToken)
 
@@ -157,13 +150,13 @@ class OaiDownloadProcessorTest(SeecrTestCase):
         observer.exceptions={'add': Exception("Could be anything")}
         oaiDownloadProcessor = OaiDownloadProcessor(path="/oai", metadataPrefix="oai_dc", workingDirectory=self.tempdir, xWait=True, err=StringIO())
         oaiDownloadProcessor.addObserver(observer)
-        self.assertEquals('GET /oai?%s HTTP/1.0\r\n\r\n' % urlencode([('verb', 'ListRecords'), ('resumptionToken', resumptionToken), ('x-wait', 'True')]), oaiDownloadProcessor.buildRequest())
+        self.assertEquals('GET /oai?%s HTTP/1.0\r\nX-Meresco-Oai-Client-Identifier: %s\r\n\r\n' % (urlencode([('verb', 'ListRecords'), ('resumptionToken', resumptionToken), ('x-wait', 'True')]), oaiDownloadProcessor._identifier), oaiDownloadProcessor.buildRequest())
         self.assertRaises(Exception, lambda: list(compose(oaiDownloadProcessor.handle(parse(StringIO(LISTRECORDS_RESPONSE))))))
         self.assertEquals(['add'], [m.name for m in observer.calledMethods])
         errorOutput = oaiDownloadProcessor._err.getvalue()
         self.assertTrue(errorOutput.startswith('Traceback'), errorOutput)
         self.assertTrue(errorOutput.endswith('Exception: Could be anything\nWhile processing:\n<record xmlns="http://www.openarchives.org/OAI/2.0/"><header><identifier>oai:identifier:1</identifier><datestamp>2011-08-22T07:34:00Z</datestamp></header><metadata>ignored</metadata></record>%s\n  \n'), errorOutput)
-        self.assertEquals('GET /oai?%s HTTP/1.0\r\n\r\n' % urlencode([('verb', 'ListRecords'), ('resumptionToken', resumptionToken), ('x-wait', 'True')]), oaiDownloadProcessor.buildRequest())
+        self.assertEquals('GET /oai?%s HTTP/1.0\r\nX-Meresco-Oai-Client-Identifier: %s\r\n\r\n' % (urlencode([('verb', 'ListRecords'), ('resumptionToken', resumptionToken), ('x-wait', 'True')]), oaiDownloadProcessor._identifier), oaiDownloadProcessor.buildRequest())
 
     def testHandleYieldsAtLeastOnceAfterEachRecord(self):
         @asyncreturn
@@ -220,6 +213,18 @@ class OaiDownloadProcessorTest(SeecrTestCase):
         self.assertEquals(resumptionToken, state2.resumptionToken)
         self.assertEquals("ERROR while processing 'oai:identifier:1': Could be anything", state2.errorState)
 
+    def testPersistentIdentifier(self):
+        identifierFilepath = join(self.tempdir, 'harvester.identifier')
+        self.assertFalse(isfile(identifierFilepath))
+        oaiDownloadProcessor = OaiDownloadProcessor(path="/oai", metadataPrefix="oai_dc", workingDirectory=self.tempdir, xWait=True)
+        currentIdentifier = oaiDownloadProcessor._identifier
+        self.assertTrue(isfile(identifierFilepath))
+        self.assertEquals(currentIdentifier, open(identifierFilepath).read())
+        self.assertEquals("""GET /oai?verb=ListRecords&metadataPrefix=oai_dc&x-wait=True HTTP/1.0\r\nX-Meresco-Oai-Client-Identifier: %s\r\n\r\n""" % currentIdentifier, oaiDownloadProcessor.buildRequest())
+        
+        oaiDownloadProcessor = OaiDownloadProcessor(path="/oai", metadataPrefix="oai_dc", workingDirectory=self.tempdir, xWait=True)
+        self.assertEquals("""GET /oai?verb=ListRecords&metadataPrefix=oai_dc&x-wait=True HTTP/1.0\r\nX-Meresco-Oai-Client-Identifier: %s\r\n\r\n""" % currentIdentifier, oaiDownloadProcessor.buildRequest())
+
 ONE_RECORD = '<record xmlns="http://www.openarchives.org/OAI/2.0/"><header><identifier>oai:identifier:1</identifier><datestamp>2011-08-22T07:34:00Z</datestamp></header><metadata>ignored</metadata></record>'
 
 LISTRECORDS_RESPONSE = """<?xml version="1.0" encoding="UTF-8" ?>
diff --git a/test/oaiintegrationtest.py b/test/oaiintegrationtest.py
index d3da0f7..bb80426 100644
--- a/test/oaiintegrationtest.py
+++ b/test/oaiintegrationtest.py
@@ -30,6 +30,7 @@ from os.path import join
 from random import randint
 from threading import Thread
 from time import sleep
+from uuid import uuid4
 
 from meresco.core import Observable
 from meresco.components.http import ObservableHttpServer
@@ -37,6 +38,8 @@ from meresco.components import StorageComponent, XmlParseLxml, PeriodicDownload
 from meresco.oai import OaiPmh, OaiJazz, OaiDownloadProcessor
 
 from seecr.test import SeecrTestCase, CallTrace
+from seecr.test.utils import getRequest
+from seecr.test.io import stderr_replaced
 from weightless.io import Reactor
 from weightless.core import be, compose
 
@@ -82,6 +85,51 @@ class OaiIntegrationTest(SeecrTestCase):
             self.run = False
             oaiPmhThread.join()
             harvestThread.join()
+    
+    def testShouldRaiseExceptionOnSameRequestTwice(self):
+        self.run = True
+        portNumber = randint(50000, 60000)
+        oaiJazz = OaiJazz(join(self.tempdir, 'oai'))
+        storageComponent = StorageComponent(join(self.tempdir, 'storage'))
+        clientId = str(uuid4())
+
+        requests = []
+        def doOaiListRecord(port):
+            header, body = getRequest(port=portNumber, path="/", arguments={"verb": "ListRecords", "metadataPrefix": "prefix", "x-wait": "True"}, additionalHeaders={'X-Meresco-Oai-Client-Identifier': clientId}, parse=False)
+            requests.append((header, body))
+
+        oaiPmhThread = Thread(None, lambda: self.startOaiPmh(portNumber, oaiJazz, storageComponent))
+        harvestThread1 = Thread(None, lambda: doOaiListRecord(portNumber))
+        harvestThread2 = Thread(None, lambda: doOaiListRecord(portNumber))
+
+        with stderr_replaced():
+            oaiPmhThread.start()
+            harvestThread1.start()
+            try:
+                while not oaiJazz._suspended:
+                    sleep(0.01)
+                harvest1Suspend = oaiJazz._suspended[clientId]
+                self.assertTrue(clientId in oaiJazz._suspended)
+                harvestThread2.start()
+                while harvest1Suspend == oaiJazz._suspended.get(clientId):
+                    sleep(0.01)
+                sleep(0.01)
+                self.assertTrue(clientId in oaiJazz._suspended)
+                self.assertTrue(harvest1Suspend != oaiJazz._suspended[clientId])
+
+                list(compose(storageComponent.add("id1", "prefix", "<a>a1</a>")))
+                oaiJazz.addOaiRecord(identifier="id1", sets=[], metadataFormats=[("prefix", "", "")])
+                sleep(0.1)
+
+                self.assertEquals(2, len(requests))
+                self.assertEquals("HTTP/1.0 500 Internal Server Error\r\nContent-Type: text/plain; charset=utf-8", requests[0][0])
+                self.assertEquals("Aborting suspended request because of new request for the same OaiClient with identifier: %s." % clientId, requests[0][1])
+                self.assertEquals("HTTP/1.0 200 OK\r\nContent-Type: text/xml; charset=utf-8", requests[1][0])
+            finally: 
+                self.run = False
+                oaiPmhThread.join()
+                harvestThread1.join()
+                harvestThread2.join()
 
     def testNearRealtimeOaiSavesState(self):
         observer = CallTrace("observer", ignoredAttributes=["observer_init"], methods={'add': lambda **kwargs: (x for x in [])})
diff --git a/test/oaijazztest.py b/test/oaijazztest.py
index 7c1b009..2ee3575 100644
--- a/test/oaijazztest.py
+++ b/test/oaijazztest.py
@@ -611,32 +611,48 @@ class OaiJazzTest(SeecrTestCase):
         self.assertEquals(['123'], list(self.jazz.oaiSelect(prefix='oai_dc')))
 
     def testAddSuspendedListRecord(self):
-        suspend = self.jazz.suspend().next()
-        self.assertTrue([suspend], self.jazz._suspended)
+        suspend = self.jazz.suspend(clientIdentifier="a-client-id").next()
+        self.assertTrue({'a-client-id': suspend}, self.jazz._suspended)
         self.assertEquals(Suspend, type(suspend))
 
+    def testSuspendSameClientTwiceBeforeResuming(self):
+        reactor = CallTrace("reactor")
+        resumed = []
+        
+        suspendGen1 = self.jazz.suspend(clientIdentifier="a-client-id")
+        suspend1 = suspendGen1.next()
+        suspend1(reactor, lambda: resumed.append(True))
+        suspend2 = self.jazz.suspend(clientIdentifier="a-client-id").next()
+        
+        try:
+            suspendGen1.next()
+            self.fail()
+        except ValueError, e:
+            self.assertTrue([True], resumed)
+            self.assertEquals("Aborting suspended request because of new request for the same OaiClient with identifier: a-client-id.", str(e))
+
     def testAddOaiRecordResumes(self):
         reactor = CallTrace("reactor")
-        suspend = self.jazz.suspend().next()
+        suspend = self.jazz.suspend(clientIdentifier="a-client-id").next()
         resumed = []
         suspend(reactor, lambda: resumed.append(True))
 
         self.jazz.addOaiRecord(identifier="identifier", metadataFormats=[('prefix', 'schema', 'namespace')])
 
         self.assertEquals([True], resumed)
-        self.assertEquals([], self.jazz._suspended)
+        self.assertEquals({}, self.jazz._suspended)
 
     def testDeleteResumes(self):
         self.jazz.addOaiRecord(identifier="identifier", metadataFormats=[('prefix', 'schema', 'namespace')])
         reactor = CallTrace("reactor")
-        suspend = self.jazz.suspend().next()
+        suspend = self.jazz.suspend(clientIdentifier="a-client-id").next()
         resumed = []
         suspend(reactor, lambda: resumed.append(True))
 
         list(compose(self.jazz.delete(identifier='identifier')))
 
         self.assertEquals([True], resumed)
-        self.assertEquals([], self.jazz._suspended)
+        self.assertEquals({}, self.jazz._suspended)
 
     def testStamp2Zulutime(self):
         self.assertEquals("2012-10-04T09:21:04Z", stamp2zulutime("1349342464630008"))
diff --git a/test/oailisttest.py b/test/oailisttest.py
index 22ab646..b03acdf 100644
--- a/test/oailisttest.py
+++ b/test/oailisttest.py
@@ -34,6 +34,7 @@ from itertools import imap
 from StringIO import StringIO
 from xml.sax.saxutils import escape as escapeXml
 from lxml.etree import parse
+from uuid import uuid4
 
 from seecr.test import SeecrTestCase, CallTrace
 
@@ -55,16 +56,17 @@ class OaiListTest(SeecrTestCase):
         self.observer = CallTrace('observer')
         self.observer.returnValues['getAllPrefixes'] = ['oai_dc']
         self.observer.methods['oaiSelect'] = lambda **kwargs: (i for i in [])
-        self.observer.methods['suspend'] = lambda: (s for s in ['SUSPEND'])
+        self.observer.methods['suspend'] = lambda clientIdentifier: (s for s in ['SUSPEND'])
         self.observer.methods['oaiWatermark'] = lambda o=None: (x for x in ["Crafted By Seecr"])
         def oaiRecord(recordId, metadataPrefix):
             yield '<mock:record xmlns:mock="uri:mock">%s/%s</mock:record>' % (escapeXml(recordId), escapeXml(metadataPrefix))
         self.observer.methods['oaiRecord'] = oaiRecord
         self.observer.methods['oaiRecordHeader'] = oaiRecord
         self.oaiList.addObserver(self.observer)
+        self.clientId = str(uuid4())
         self.httpkwargs = {
             'path': '/path/to/oai',
-            'Headers':{'Host':'server'},
+            'Headers':{'Host':'server', 'X-Meresco-Oai-Client-Identifier': self.clientId},
             'port':9000,
         }
 
@@ -161,8 +163,9 @@ class OaiListTest(SeecrTestCase):
         result = compose(self.oaiList.listRecords(arguments={'verb':['ListRecords'], 'metadataPrefix': ['oai_dc'], 'x-wait': ['True']}, **self.httpkwargs))
         suspend = result.next()
         self.assertEquals(['getAllPrefixes', 'oaiSelect', 'suspend'], [m.name for m in self.observer.calledMethods])
+        self.assertEquals({"clientIdentifier": self.clientId}, self.observer.calledMethods[2].kwargs)
         self.observer.returnValues['oaiSelect'] = (f for f in ['id:1&1'])
-        del self.observer.calledMethods[:]
+        self.observer.calledMethods.reset()
 
         header, body = ''.join(compose(result)).split(CRLF*2)
         oai = parse(StringIO(body))
@@ -185,7 +188,7 @@ class OaiListTest(SeecrTestCase):
         self.observer.returnValues['getAllPrefixes'] = ['other_prefix']
         suspend = result.next() 
         self.observer.returnValues['oaiSelect'] = (f for f in ['id:1&1'])
-        del self.observer.calledMethods[:]
+        self.observer.calledMethods.reset()
 
         header, body = ''.join(compose(result)).split(CRLF*2)
         oai = parse(StringIO(body))
@@ -218,7 +221,7 @@ class OaiListTest(SeecrTestCase):
     def testFromAndUntil(self):
         def selectArguments(oaiFrom, oaiUntil):
             self.observer.returnValues['oaiSelect'] = (f for f in ['id:3&3'])
-            del self.observer.calledMethods[:]
+            self.observer.calledMethods.reset()
             arguments = {'verb':['ListRecords'], 'metadataPrefix': ['oai_dc']}
             if oaiFrom:
                 arguments['from'] = [oaiFrom]
@@ -240,7 +243,7 @@ class OaiListTest(SeecrTestCase):
     def testFromAndUntilErrors(self):
         def getError(oaiFrom, oaiUntil):
             self.observer.returnValues['oaiSelect'] = (f for f in ['id:3&3'])
-            del self.observer.calledMethods[:]
+            self.observer.calledMethods.reset()
             arguments = {'verb':['ListRecords'], 'metadataPrefix': ['oai_dc']}
             if oaiFrom:
                 arguments['from'] = [oaiFrom]
-- 
1.7.2.5


From 741c35178f1b1c0c694bc5ec0b5911e09cc4e304 Mon Sep 17 00:00:00 2001
From: Tom van der Sommen <tom@seecr.nl>
Date: Mon, 10 Dec 2012 16:56:38 +0100
Subject: [PATCH 2/3] TS: fixed logic for "yield Yield" not to depend on callable-ishness of the sentinel

---
 doc/license.conf        |    4 +-
 meresco/oai/oaierror.py |    4 +-
 test/_alltests.py       |    3 +-
 test/oaierrortest.py    |   88 +++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 94 insertions(+), 5 deletions(-)
 create mode 100644 test/oaierrortest.py

diff --git a/doc/license.conf b/doc/license.conf
index 7f4fcf7..1b6f979 100644
--- a/doc/license.conf
+++ b/doc/license.conf
@@ -4,10 +4,10 @@
     "license": "GPLv2",
     "copyrights": [
         {"name": "Seecr (Seek You Too B.V.)", "url": "http://seecr.nl", "years": [2012]},
-        {"name": "Stichting Bibliotheek.nl (BNL)", "url": "http://www.bibliotheek.nl", "years": [2012]}
+        {"name": "Stichting Kennisnet", "url": "http://www.kennisnet.nl", "years": [2012]}
     ],
     "copyrights_unused": [
-        {"name": "Stichting Kennisnet", "url": "http://www.kennisnet.nl", "years": [2011]},
+        {"name": "Stichting Bibliotheek.nl (BNL)", "url": "http://www.bibliotheek.nl", "years": [2012]},
         {"name": "SURF Foundation.", "url": "http://www.surf.nl", "years": [2007, 2008, 2009]},
         {"name": "Delft University of Technology", "url": "http://www.tudelft.nl", "years": [2009]},
         {"name": "Tilburg University", "url": "http://www.uvt.nl", "years": [2009]},
diff --git a/meresco/oai/oaierror.py b/meresco/oai/oaierror.py
index 931f458..9114a13 100644
--- a/meresco/oai/oaierror.py
+++ b/meresco/oai/oaierror.py
@@ -30,7 +30,7 @@
 ## end license ##
 
 from meresco.core import Observable
-from weightless.core import compose
+from weightless.core import compose, Yield
 from oaiutils import oaiHeader, oaiFooter, REQUEST, requestUrl, oaiRequestArgs, zuluTime
 
 class OaiError(Observable):
@@ -38,7 +38,7 @@ class OaiError(Observable):
         result = compose(self.all.unknown(message, **kwargs))
         try:
             firstDataResult = result.next()
-            while callable(firstDataResult):
+            while callable(firstDataResult) or firstDataResult is Yield:
                 yield firstDataResult
                 firstDataResult = result.next()
         except StopIteration:
diff --git a/test/_alltests.py b/test/_alltests.py
index 892d3a0..573f1a8 100644
--- a/test/_alltests.py
+++ b/test/_alltests.py
@@ -54,6 +54,8 @@ from oaiaddrecordtest import OaiAddRecordTest
 from oaiaddrecordwithdefaultstest import OaiAddRecordWithDefaultsTest
 from oaibrandingtest import OaiBrandingTest
 from oaidownloadprocessortest import OaiDownloadProcessorTest
+from oaierrortest import OaiErrorTest
+from oaiintegrationtest import OaiIntegrationTest
 from oaijazztest import OaiJazzTest
 from oailisttest import OaiListTest
 from oaipmhtest import OaiPmhTest, OaiPmhWithIdentifierTest, HttpPostOaiPmhTest
@@ -61,7 +63,6 @@ from oaiprovenancetest import OaiProvenanceTest
 from oairecordtest import OaiRecordTest
 from oaisetmasktest import OaiSetMaskTest
 from oaisetselecttest import OaiSetSelectTest
-from oaiintegrationtest import OaiIntegrationTest
 from oaitooltest import OaiToolTest
 from resumptiontokentest import ResumptionTokenTest
 from streaminglxmltest import StreamingLxmlTest
diff --git a/test/oaierrortest.py b/test/oaierrortest.py
new file mode 100644
index 0000000..dadb025
--- /dev/null
+++ b/test/oaierrortest.py
@@ -0,0 +1,88 @@
+## begin license ##
+# 
+# "Meresco Oai" are components to build Oai repositories, based on
+# "Meresco Core" and "Meresco Components". 
+# 
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Kennisnet http://www.kennisnet.nl
+# 
+# This file is part of "Meresco Oai"
+# 
+# "Meresco Oai" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Oai" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Oai"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
+## end license ##
+
+from seecr.test import SeecrTestCase, CallTrace
+
+from weightless.core import compose, be, Yield
+from meresco.core import Observable
+
+from meresco.oai.oaierror import OaiError
+
+
+class OaiErrorTest(SeecrTestCase):
+    def setUp(self):
+        SeecrTestCase.setUp(self)
+
+        self.data = []
+        def responder(**kwargs):
+            while self.data:
+                yield self.data.pop(0)
+        self.observer = CallTrace('Observer', methods={'someMessage': responder})
+
+        self.dna = be((Observable(),
+            (OaiError(),
+                (self.observer,)
+            )
+        ))
+
+
+    def testShouldGiveOaiErrorOnNoData(self):
+        result = ''.join(compose(self.dna.all.someMessage(arguments={'http': 'arguments'}, Headers={}, path='/some/path', port=0, otherKwargs='kwargs')))
+        self.assertTrue('HTTP/1.0 200 OK\r\nContent-Type: text/xml; charset=utf-8\r\n\r\n', result)
+        self.assertTrue('<error code="badArgument">' in result, result)
+
+    def testShouldNotCountInitialCallablesOrYieldsAsNonErrorCondition(self):
+        callablesAndYields = [Yield, callable, Yield, lambda: None]
+        self.data.extend(callablesAndYields)
+
+        result = list(compose(self.dna.all.someMessage(arguments={'http': 'arguments'}, Headers={}, path='/some/path', port=0, otherKwargs='kwargs')))
+        initial, remaining = result[:4], result[4:]
+        remaining = ''.join(remaining)
+
+        self.assertEquals(callablesAndYields, initial)
+        self.assertTrue('HTTP/1.0 200 OK\r\nContent-Type: text/xml; charset=utf-8\r\n\r\n', remaining)
+        self.assertTrue('<error code="badArgument">' in remaining, remaining)
+
+    def testShouldConsiderEverythingFineAfterFistPieceOfData(self):
+        # Data only
+        callablesAndYields = ['data']
+        self.data.extend(callablesAndYields)
+
+        result = ''.join(compose(self.dna.all.someMessage(arguments={'http': 'arguments'}, Headers={}, path='/some/path', port=0, otherKwargs='kwargs')))
+        self.assertEquals('data', result)
+
+        # Callables, Yields and then data
+        callablesAndYields = [Yield, callable, Yield, lambda: None]
+        self.data.extend(callablesAndYields)
+        self.data.append('data')
+
+        result = list(compose(self.dna.all.someMessage(arguments={'http': 'arguments'}, Headers={}, path='/some/path', port=0, otherKwargs='kwargs')))
+        initial, remaining = result[:4], result[4:]
+        remaining = ''.join(remaining)
+
+        self.assertEquals(callablesAndYields, initial)
+        self.assertEquals('data', remaining)
+
-- 
1.7.2.5


From 52aac6446f2d787d3c9e8469458e485140c1e10c Mon Sep 17 00:00:00 2001
From: Hendrik Moree <hendrik@seecr.nl>
Date: Tue, 11 Dec 2012 09:17:23 +0100
Subject: [PATCH 3/3] TS/HM: Generated uuid if X-Meresco-Oai-Client-Identifier not in headers; (For backwards compatability)

---
 meresco/oai/oailist.py |    8 +++++++-
 test/oailisttest.py    |   20 ++++++++++++++++++++
 2 files changed, 27 insertions(+), 1 deletions(-)

diff --git a/meresco/oai/oailist.py b/meresco/oai/oailist.py
index c5cf0ad..5996a11 100644
--- a/meresco/oai/oailist.py
+++ b/meresco/oai/oailist.py
@@ -39,6 +39,8 @@ from oaitool import ISO8601, ISO8601Exception
 from itertools import chain, islice
 from oaiutils import checkNoRepeatedArguments, checkNoMoreArguments, checkArgument, OaiBadArgumentException, oaiFooter, oaiHeader, oaiRequestArgs, OaiException, zuluTime
 from oaierror import oaiError
+from uuid import uuid4
+import sys
 
 
 class OaiList(Observable):
@@ -117,7 +119,11 @@ Error and Exception Conditions
             except OaiException, e:
                 if validatedArguments.get("x-wait", 'False') == 'True' and \
                         e.statusCode in ["noRecordsMatch", "cannotDisseminateFormat"]:
-                    clientId = httpkwargs['Headers']['X-Meresco-Oai-Client-Identifier']
+                    clientId = httpkwargs['Headers'].get('X-Meresco-Oai-Client-Identifier')
+                    if clientId is None:
+                        clientId = str(uuid4())
+                        sys.stderr.write("X-Meresco-Oai-Client-Identifier not found in HTTP Headers. Generated a uuid for oai client from %s" % httpkwargs['Client'][0])
+                        sys.stderr.flush()
                     try:
                         yield self.any.suspend(clientIdentifier=clientId)
                     except Exception, e:
diff --git a/test/oailisttest.py b/test/oailisttest.py
index b03acdf..1de7a75 100644
--- a/test/oailisttest.py
+++ b/test/oailisttest.py
@@ -37,6 +37,7 @@ from lxml.etree import parse
 from uuid import uuid4
 
 from seecr.test import SeecrTestCase, CallTrace
+from seecr.test.io import stderr_replaced
 
 from weightless.core import compose, Yield
 from meresco.components.http.utils import CRLF
@@ -201,6 +202,25 @@ class OaiListTest(SeecrTestCase):
         recordMethods = self.observer.calledMethods[3:]
         self.assertEquals({'recordId':'id:1&1', 'metadataPrefix':'other_prefix'}, recordMethods[0].kwargs)
 
+    def testListRecordsWithoutClientIdentifierGeneratesOne(self):
+        self.oaiList = OaiList(batchSize=2, supportXWait=True)
+        self.oaiList.addObserver(self.observer)
+        self.observer.returnValues['oaiSelect'] = (f for f in [])
+
+        self.httpkwargs = {
+            'path': '/path/to/oai',
+            'Headers':{'Host':'server'},
+            'port':9000,
+            'Client': ('127.0.0.1', 1234)
+        }
+        with stderr_replaced() as s:
+            result = compose(self.oaiList.listRecords(arguments={'verb':['ListRecords'], 'metadataPrefix': ['oai_dc'], 'x-wait': ['True']}, **self.httpkwargs))
+            suspend = result.next()
+        self.assertEquals(['getAllPrefixes', 'oaiSelect', 'suspend'], [m.name for m in self.observer.calledMethods])
+        self.assertTrue('clientIdentifier' in self.observer.calledMethods[2].kwargs)
+        self.assertEquals(len(str(uuid4())), len(self.observer.calledMethods[2].kwargs['clientIdentifier']))
+        self.assertEquals("X-Meresco-Oai-Client-Identifier not found in HTTP Headers. Generated a uuid for oai client from 127.0.0.1", s.getvalue())
+
     def testNotSupportedXWait(self):
         self.observer.returnValues['oaiSelect'] = (f for f in ['id:1', 'id:2'])
         header, body = ''.join(compose(self.oaiList.listRecords(arguments={'verb':['ListRecords'], 'metadataPrefix': ['oai_dc'], 'x-wait': ['True']}, **self.httpkwargs))).split(CRLF*2)
-- 
1.7.2.5

