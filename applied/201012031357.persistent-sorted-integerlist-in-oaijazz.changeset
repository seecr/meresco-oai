Changeset created on Fri Dec  3 13:57:38 CET 2010 by Seek You Too

Description: Using faster PersistentSortedIntegerList instead of SortedFileList in OaiJazz

    PersistentSortedIntegerList is faster than SortedFileList, especially for deletes (which could halt the system for seconds). Because the format of persisted lists differ from the previous version, a version check + conversion script was added as well.

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-oai/workingsets/3.3-Edurep/version_8

diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_8/bin/convert_oai_v1_to_v2.py version_9/bin/convert_oai_v1_to_v2.py
--- version_8/bin/convert_oai_v1_to_v2.py	1970-01-01 01:00:00.000000000 +0100
+++ version_9/bin/convert_oai_v1_to_v2.py	2010-12-03 13:57:02.000000000 +0100
@@ -0,0 +1,75 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+## begin license ##
+#
+#    Meresco Oai are components to build Oai repositories, based on Meresco
+#    Core and Meresco Components.
+#    Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+#
+#    This file is part of Meresco Oai.
+#
+#    Meresco Oai is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    Meresco Oai is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with Meresco Oai; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from os import system                             #DO_NOT_DISTRIBUTE
+from sys import path as sysPath                   #DO_NOT_DISTRIBUTE
+system('find .. -name "*.pyc" | xargs rm -f')     #DO_NOT_DISTRIBUTE
+                                                  #DO_NOT_DISTRIBUTE
+from glob import glob                             #DO_NOT_DISTRIBUTE
+for path in glob('../deps.d/*'):                  #DO_NOT_DISTRIBUTE
+    sysPath.insert(0, path)                       #DO_NOT_DISTRIBUTE
+sysPath.insert(0,'..')                            #DO_NOT_DISTRIBUTE
+
+import sys
+from os import listdir, remove, rename
+from os.path import join, isdir, isfile
+from meresco.components.facetindex import IntegerList
+from meresco.oai import OaiJazz
+
+def convert(path):
+    iList = IntegerList(0, use64bits=True)
+    iList.extendFrom(path)
+    iListDeleted = IntegerList(0, use64bits=True)
+    if isfile(path + '.deleted'):
+        iListDeleted.extendFrom(path + '.deleted')
+        deleted = sorted(iListDeleted, reverse=True)
+        for position in deleted:
+            del iList[position]
+    iList.save(path + '~', offset=0, append=False)
+    if isfile(path + '.deleted'):
+        remove(path + '.deleted')
+    rename(path + '~', path)
+
+def convertDir(directory):
+    for path in listdir(directory):
+        fullpath = join(directory, path)
+        if path.endswith('.list'):
+            convert(fullpath)
+        if isdir(fullpath):
+            convertDir(fullpath)
+
+def main():
+    if len(sys.argv) != 2:
+        print 'Usage: %s [OAI directory]' % sys.argv[0]
+        exit(1)
+    directory = sys.argv[1]
+    convertDir(directory)
+    open(join(directory, 'oai.version'), 'w').write(OaiJazz.version)
+    print "Finished converting %s to OAI data format v2." % directory
+
+if __name__ == '__main__':
+    main()
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_8/meresco/oai/oaijazz.py version_9/meresco/oai/oaijazz.py
--- version_8/meresco/oai/oaijazz.py	2010-11-17 11:23:58.000000000 +0100
+++ version_9/meresco/oai/oaijazz.py	2010-12-03 13:57:02.000000000 +0100
@@ -30,12 +30,12 @@
 ## end license ##
 
 from __future__ import with_statement
-from os.path import isdir, join
+from os.path import isdir, join, isfile
 from os import makedirs, listdir, rename
 from storage.storage import escapeName, unescapeName
 from time import time, strftime, localtime, mktime, strptime
 from meresco.components.sorteditertools import OrIterator, AndIterator, WrapIterable
-from meresco.components import SortedFileList, DoubleUniqueBerkeleyDict, BerkeleyDict
+from meresco.components import PersistentSortedIntegerList, DoubleUniqueBerkeleyDict, BerkeleyDict
 from sys import maxint
 
 from bisect import bisect_left
@@ -44,10 +44,13 @@
 SETSPEC_SEPARATOR = ','
 
 class OaiJazz(object):
+
+    version = '2'
+
     def __init__(self, aDirectory):
         self._directory = aDirectory
-        if isdir(join(aDirectory, 'sets')):
-            assert isdir(join(aDirectory, 'identifier2setSpecs')), "This is an old OaiJazz data storage which doesn't have the identifier2setSpecs directory. Please convert manually or rebuild complete data storage."
+        isdir(aDirectory) or makedirs(aDirectory)
+        self._versionFormatCheck()
         isdir(join(aDirectory, 'stamp2identifier')) or makedirs(join(aDirectory,'stamp2identifier'))
         isdir(join(aDirectory, 'identifier2setSpecs')) or makedirs(join(aDirectory,'identifier2setSpecs'))
         isdir(join(aDirectory, 'sets')) or makedirs(join(aDirectory,'sets'))
@@ -56,8 +59,7 @@
         self._prefixes = {}
         self._sets = {}
         self._stamp2identifier = DoubleUniqueBerkeleyDict(join(self._directory, 'stamp2identifier'))
-        self._tombStones = SortedFileList(join(self._directory, 'tombStones.list'),
-        mergeTrigger=MERGE_TRIGGER)
+        self._tombStones = PersistentSortedIntegerList(join(self._directory, 'tombStones.list'), use64bits=True, mergeTrigger=MERGE_TRIGGER)
         self._identifier2setSpecs = BerkeleyDict(join(self._directory, 'identifier2setSpecs'))
         self._read()
 
@@ -177,13 +179,13 @@
     def _getSetList(self, setSpec):
         if setSpec not in self._sets:
             filename = join(self._directory, 'sets', '%s.list' % escapeName(setSpec))
-            self._sets[setSpec] = SortedFileList(filename, mergeTrigger=MERGE_TRIGGER)
+            self._sets[setSpec] = PersistentSortedIntegerList(filename, use64bits=True, mergeTrigger=MERGE_TRIGGER)
         return self._sets[setSpec]
 
     def _getPrefixList(self, prefix):
         if prefix not in self._prefixes:
             filename = join(self._directory, 'prefixes', '%s.list' % escapeName(prefix))
-            self._prefixes[prefix] = SortedFileList(filename, mergeTrigger=MERGE_TRIGGER)
+            self._prefixes[prefix] = PersistentSortedIntegerList(filename, use64bits=True, mergeTrigger=MERGE_TRIGGER)
         return self._prefixes[prefix]
 
     def _fromTime(self, oaiFrom):
@@ -247,6 +249,15 @@
         """time in microseconds"""
         return int(time()*1000000.0)
 
+    def _versionFormatCheck(self):
+        if isdir(join(self._directory, 'sets')):
+            assert isdir(join(self._directory, 'identifier2setSpecs')), "This is an old OaiJazz data storage which doesn't have the identifier2setSpecs directory. Please convert manually or rebuild complete data storage."
+
+        self._versionFile = join(self._directory, "oai.version")
+        assert listdir(self._directory) == [] or (isfile(self._versionFile) and open(self._versionFile).read() == self.version), "The OAI index at %s need to be converted to the current version (with 'convert_oai_v1_to_v2.py' in meresco-oai/bin)" % self._directory
+        with open(join(self._directory, "oai.version"), 'w') as f:
+            f.write(self.version)
+
 # helper methods
 
 class RecordId(str):
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_8/test/_alltests.py version_9/test/_alltests.py
--- version_8/test/_alltests.py	2010-11-17 11:23:58.000000000 +0100
+++ version_9/test/_alltests.py	2010-12-03 13:57:02.000000000 +0100
@@ -42,6 +42,7 @@
 
 import unittest
 
+from convertoaiv1tov2test import ConvertOaiV1ToV2Test
 from fields2oairecordtest import Fields2OaiRecordTest
 from oaiaddrecordtest import OaiAddRecordTest
 from oaigetrecordtest import OaiGetRecordTest
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_8/test/convertoaiv1tov2test.py version_9/test/convertoaiv1tov2test.py
--- version_8/test/convertoaiv1tov2test.py	1970-01-01 01:00:00.000000000 +0100
+++ version_9/test/convertoaiv1tov2test.py	2010-12-03 13:57:02.000000000 +0100
@@ -0,0 +1,66 @@
+## begin license ##
+#
+#    Meresco Oai are components to build Oai repositories, based on Meresco
+#    Core and Meresco Components.
+#    Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+#
+#    This file is part of Meresco Oai.
+#
+#    Meresco Oai is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    Meresco Oai is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with Meresco Oai; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+from os import system
+from os.path import dirname, join
+from shutil import copytree
+
+from cq2utils import CQ2TestCase
+from meresco.components import PersistentSortedIntegerList
+from meresco.components.facetindex import IntegerList
+from meresco.oai import OaiJazz
+
+class ConvertOaiV1ToV2Test(CQ2TestCase):
+    def testConversion(self):
+        thisdir = dirname(__file__)
+        datadir = join(self.tempdir, 'oai_conversion_v1_to_v2')
+        copytree(join(thisdir, 'data', 'oai_conversion_v1_to_v2'), datadir)
+
+        anotherSet = IntegerList(10, use64bits=True)
+        anotherSet.save(join(datadir, 'sets', 'anotherSet.list'), offset=0, append=False)
+        anotherSetDeleted = IntegerList(5, use64bits=True)
+        anotherSetDeleted.save(join(datadir, 'sets', 'anotherSet.list.deleted'), offset=0, append=False)
+
+        anotherPrefix = IntegerList(10, use64bits=True)
+        anotherPrefix.save(join(datadir, 'prefixes', 'anotherPrefix.list'), offset=0, append=False)
+
+        system("%s %s" % (join(thisdir, '..', 'bin', 'convert_oai_v1_to_v2.py'), join(self.tempdir, 'oai_conversion_v1_to_v2')))
+
+        expectedList = PersistentSortedIntegerList(join(self.tempdir, 'forAssertEquals'), use64bits=True)
+        for i in xrange(10 ** 3):
+            expectedList.append(i)
+        expectedList.remove(200)
+        expectedList.remove(600)
+        expectedList.remove(4)
+        for listName in ['tombStones', 'prefixes/somePrefix', 'sets/someSet']:
+            converted = PersistentSortedIntegerList(join(datadir, listName + '.list'), use64bits=True)
+            self.assertEquals(list(expectedList), list(converted))
+
+        convertedAnotherSet = PersistentSortedIntegerList(join(datadir, 'sets', 'anotherSet.list'), use64bits=True)
+        self.assertEquals(range(5, 10), list(convertedAnotherSet))
+
+        convertedAnotherPrefix = PersistentSortedIntegerList(join(datadir, 'prefixes', 'anotherPrefix.list'), use64bits=True)
+        self.assertEquals(range(0, 10), list(convertedAnotherPrefix))
+
+        self.assertEquals(OaiJazz.version, open(join(datadir, 'oai.version')).read())
Binary files version_8/test/data/oai_conversion_v1_to_v2/prefixes/somePrefix.list and version_9/test/data/oai_conversion_v1_to_v2/prefixes/somePrefix.list differ
Binary files version_8/test/data/oai_conversion_v1_to_v2/prefixes/somePrefix.list.deleted and version_9/test/data/oai_conversion_v1_to_v2/prefixes/somePrefix.list.deleted differ
Binary files version_8/test/data/oai_conversion_v1_to_v2/sets/someSet.list and version_9/test/data/oai_conversion_v1_to_v2/sets/someSet.list differ
Binary files version_8/test/data/oai_conversion_v1_to_v2/sets/someSet.list.deleted and version_9/test/data/oai_conversion_v1_to_v2/sets/someSet.list.deleted differ
Binary files version_8/test/data/oai_conversion_v1_to_v2/tombStones.list and version_9/test/data/oai_conversion_v1_to_v2/tombStones.list differ
Binary files version_8/test/data/oai_conversion_v1_to_v2/tombStones.list.deleted and version_9/test/data/oai_conversion_v1_to_v2/tombStones.list.deleted differ
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_8/test/oaijazztest.py version_9/test/oaijazztest.py
--- version_8/test/oaijazztest.py	2010-11-17 11:23:58.000000000 +0100
+++ version_9/test/oaijazztest.py	2010-12-03 13:57:02.000000000 +0100
@@ -30,7 +30,9 @@
 ## end license ##
 from cq2utils import CQ2TestCase, CallTrace
 
+from os import listdir, remove
 from os.path import isfile, join
+from shutil import rmtree
 from time import time, mktime, strptime, sleep
 
 from meresco.oai import OaiJazz
@@ -39,8 +41,6 @@
 from lxml.etree import parse
 from meresco.core import Observable, be, Transparant
 
-from os import listdir
-from shutil import rmtree
 
 class OaiJazzTest(CQ2TestCase):
     def setUp(self):
@@ -232,3 +232,26 @@
         rmtree(join(self.tempdir, 'identifier2setSpecs'))
         self.assertRaises(AssertionError, lambda: OaiJazz(self.tempdir))
 
+    def testVersionWritten(self):
+        version = open(join(self.tempdir, "oai.version")).read()
+        self.assertEquals(version, OaiJazz.version)
+   
+    def testRefuseInitWithNoVersionFile(self):
+        self.oaiJazz = None
+        remove(join(self.tempdir, 'oai.version'))
+
+        try:
+            oaiJazz = OaiJazz(self.tempdir)
+            self.fail("Should have raised AssertionError with instruction of how to convert OAI index.")
+        except AssertionError, e:
+            self.assertEquals("The OAI index at %s need to be converted to the current version (with 'convert_oai_v1_to_v2.py' in meresco-oai/bin)" % self.tempdir, str(e))
+
+    def testRefuseInitWithDifferentVersionFile(self):
+        self.oaiJazz = None
+        open(join(self.tempdir, 'oai.version'), 'w').write('different version')
+
+        try:
+            oaiJazz = OaiJazz(self.tempdir)
+            self.fail("Should have raised AssertionError with instruction of how to convert OAI index.")
+        except AssertionError, e:
+            self.assertEquals("The OAI index at %s need to be converted to the current version (with 'convert_oai_v1_to_v2.py' in meresco-oai/bin)" % self.tempdir, str(e))
