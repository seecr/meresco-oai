Changeset created on Wed Jan 18 11:04:42 UTC 2012 by Seecr (Seek You Too B.V.)

Description: Watermark

    Added a hook to allow a "watermark" comment to be added to the xml output

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-oai/workingsets/3.6.14-Seecr/version_0

diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/meresco/oai/oaierror.py /home/johan/development/sourceforge/meresco-oai/workingsets/3.6.14-Seecr/version_1/meresco/oai/oaierror.py
--- version_0/meresco/oai/oaierror.py	2012-01-18 09:04:39.000000000 +0100
+++ version_1/meresco/oai/oaierror.py	2012-01-18 12:04:37.000000000 +0100
@@ -57,9 +57,8 @@
     message = ERROR_CODES[statusCode] + space + additionalMessage
 
     yield oaiHeader()
-
     if statusCode in ["badArgument", "badResumptionToken", "badVerb"]:
-        """in these cases it is illegal to echo the arguments back; since the arguments are not valid in the first place the responce will not validate either"""
+        """in these cases it is illegal to echo the arguments back; since the arguments are not valid in the first place the response will not validate either"""
         yield oaiRequestArgs({}, **httpkwargs)
     else:
         yield oaiRequestArgs(arguments, **httpkwargs)
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/meresco/oai/oaigetrecord.py /home/johan/development/sourceforge/meresco-oai/workingsets/3.6.14-Seecr/version_1/meresco/oai/oaigetrecord.py
--- version_0/meresco/oai/oaigetrecord.py	2012-01-18 09:04:39.000000000 +0100
+++ version_1/meresco/oai/oaigetrecord.py	2012-01-18 12:04:37.000000000 +0100
@@ -62,7 +62,7 @@
             yield oaiError(e.statusCode, e.additionalMessage, arguments, **httpkwargs)
             return
 
-        yield oaiHeader()
+        yield oaiHeader(self)
         yield oaiRequestArgs(arguments, **httpkwargs)
         yield '<%s>' % verb
         yield self.all.oaiRecord(recordId=recordId, metadataPrefix=metadataPrefix)
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/meresco/oai/oaiidentify.py /home/johan/development/sourceforge/meresco-oai/workingsets/3.6.14-Seecr/version_1/meresco/oai/oaiidentify.py
--- version_0/meresco/oai/oaiidentify.py	2012-01-18 09:08:12.000000000 +0100
+++ version_1/meresco/oai/oaiidentify.py	2012-01-18 12:04:37.000000000 +0100
@@ -95,7 +95,7 @@
             'deletedRecord': 'persistent',
         }
         values.update(hardcoded_values)
-        yield oaiHeader()
+        yield oaiHeader(self)
         yield oaiRequestArgs(arguments, **httpkwargs)
         yield '<Identify>'
         yield IDENTIFY % values
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/meresco/oai/oailistmetadataformats.py /home/johan/development/sourceforge/meresco-oai/workingsets/3.6.14-Seecr/version_1/meresco/oai/oailistmetadataformats.py
--- version_0/meresco/oai/oailistmetadataformats.py	2012-01-18 09:04:39.000000000 +0100
+++ version_1/meresco/oai/oailistmetadataformats.py	2012-01-18 12:04:37.000000000 +0100
@@ -70,7 +70,7 @@
             yield oaiError(e.statusCode, e.additionalMessage, arguments, **httpkwargs)
             return
 
-        yield oaiHeader()
+        yield oaiHeader(self)
         yield oaiRequestArgs(arguments, **httpkwargs)
         yield '<%s>' % verb
         for metadataPrefix, schema, metadataNamespace in displayedMetadataFormats:
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/meresco/oai/oailist.py /home/johan/development/sourceforge/meresco-oai/workingsets/3.6.14-Seecr/version_1/meresco/oai/oailist.py
--- version_0/meresco/oai/oailist.py	2012-01-18 09:04:39.000000000 +0100
+++ version_1/meresco/oai/oailist.py	2012-01-18 12:04:37.000000000 +0100
@@ -116,7 +116,7 @@
                     yield oaiError(e.statusCode, e.additionalMessage, arguments, **httpkwargs)
                     return
         
-        yield oaiHeader()
+        yield oaiHeader(self)
         yield oaiRequestArgs(arguments, **httpkwargs)
         yield '<%s>' % verb
         yield self._process(verb, results, validatedArguments, **httpkwargs)
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/meresco/oai/oailistsets.py /home/johan/development/sourceforge/meresco-oai/workingsets/3.6.14-Seecr/version_1/meresco/oai/oailistsets.py
--- version_0/meresco/oai/oailistsets.py	2012-01-18 09:04:39.000000000 +0100
+++ version_1/meresco/oai/oailistsets.py	2012-01-18 12:04:37.000000000 +0100
@@ -66,7 +66,7 @@
             yield oaiError(e.statusCode, e.additionalMessage, arguments, **httpkwargs)
             return
 
-        yield oaiHeader()
+        yield oaiHeader(self)
         yield oaiRequestArgs(arguments, **httpkwargs)
         yield '<%s>' % verb
         for setSpec in sets:
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/meresco/oai/oaiutils.py /home/johan/development/sourceforge/meresco-oai/workingsets/3.6.14-Seecr/version_1/meresco/oai/oaiutils.py
--- version_0/meresco/oai/oaiutils.py	2012-01-18 09:04:39.000000000 +0100
+++ version_1/meresco/oai/oaiutils.py	2012-01-18 12:04:37.000000000 +0100
@@ -48,9 +48,11 @@
     hostname = Headers.get('Host', HOSTNAME).split(':')[0]
     return 'http://%s:%s%s' % (hostname, port, path)
 
-def oaiHeader():
+def oaiHeader(observable=None):
     yield okXml
     yield OAIHEADER
+    if observable:
+        yield observable.all.oaiWatermark()
     yield RESPONSE_DATE % zuluTime()
 
 def oaiFooter():
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/test/oailisttest.py /home/johan/development/sourceforge/meresco-oai/workingsets/3.6.14-Seecr/version_1/test/oailisttest.py
--- version_0/test/oailisttest.py	2012-01-18 09:04:39.000000000 +0100
+++ version_1/test/oailisttest.py	2012-01-18 12:04:37.000000000 +0100
@@ -56,6 +56,7 @@
         self.observer.returnValues['getAllPrefixes'] = ['oai_dc']
         self.observer.returnValues['oaiSelect'] = (f for f in [])
         self.observer.returnValues['suspend'] = 'SUSPEND'
+        self.observer.returnValues['oaiWatermark'] = "Crafted By Seecr"
         def oaiRecord(recordId, metadataPrefix):
             return '<mock:record xmlns:mock="uri:mock">%s/%s</mock:record>' % (escapeXml(recordId), escapeXml(metadataPrefix))
         self.observer.methods['oaiRecord'] = oaiRecord
@@ -75,10 +76,10 @@
 
         self.assertEquals(2, len(xpath(oai, '/oai:OAI-PMH/oai:ListRecords/mock:record')))
         self.assertEquals(0, len(xpath(oai, '/oai:OAI-PMH/oai:ListRecords/oai:resumptionToken')))
-        self.assertEquals(['getAllPrefixes', 'oaiSelect', 'oaiRecord', 'oaiRecord'], [m.name for m in self.observer.calledMethods])
+        self.assertEquals(['getAllPrefixes', 'oaiSelect', 'oaiWatermark', 'oaiRecord', 'oaiRecord'], [m.name for m in self.observer.calledMethods])
         selectMethod = self.observer.calledMethods[1]
         self.assertEquals({'continueAfter':'0', 'oaiUntil':None, 'prefix':'oai_dc', 'oaiFrom':None, 'sets':None}, selectMethod.kwargs)
-        recordMethods = self.observer.calledMethods[2:]
+        recordMethods = self.observer.calledMethods[3:]
         self.assertEquals({'recordId':'id:0&0', 'metadataPrefix':'oai_dc'}, recordMethods[0].kwargs)
         self.assertEquals({'recordId':'id:1&1', 'metadataPrefix':'oai_dc'}, recordMethods[1].kwargs)
 
@@ -90,10 +91,10 @@
 
         self.assertEquals(2, len(xpath(oai, '/oai:OAI-PMH/oai:ListIdentifiers/mock:record')))
         self.assertEquals(0, len(xpath(oai, '/oai:OAI-PMH/oai:ListIdentifiers/oai:resumptionToken')))
-        self.assertEquals(['getAllPrefixes', 'oaiSelect', 'oaiRecordHeader', 'oaiRecordHeader'], [m.name for m in self.observer.calledMethods])
+        self.assertEquals(['getAllPrefixes', 'oaiSelect', 'oaiWatermark', 'oaiRecordHeader', 'oaiRecordHeader'], [m.name for m in self.observer.calledMethods])
         selectMethod = self.observer.calledMethods[1]
         self.assertEquals({'continueAfter':'0', 'oaiUntil':None, 'prefix':'oai_dc', 'oaiFrom':None, 'sets':None}, selectMethod.kwargs)
-        headerMethods = self.observer.calledMethods[2:]
+        headerMethods = self.observer.calledMethods[3:]
         self.assertEquals({'recordId':'id:0&0', 'metadataPrefix':'oai_dc'}, headerMethods[0].kwargs)
         self.assertEquals({'recordId':'id:1&1', 'metadataPrefix':'oai_dc'}, headerMethods[1].kwargs)
 
@@ -107,10 +108,10 @@
         self.assertEquals(2, len(xpath(oai, '/oai:OAI-PMH/oai:ListRecords/mock:record')))
         resumptionToken = xpath(oai, '/oai:OAI-PMH/oai:ListRecords/oai:resumptionToken/text()')
         self.assertEquals(['u2012-01-01T00:00:00Z|cunique_for_id|moai_dc|sset0|f2000-01-01T00:00:00Z'], resumptionToken)
-        self.assertEquals(['getAllPrefixes', 'oaiSelect', 'oaiRecord', 'oaiRecord', 'getUnique'], [m.name for m in self.observer.calledMethods])
+        self.assertEquals(['getAllPrefixes', 'oaiSelect', 'oaiWatermark', 'oaiRecord', 'oaiRecord', 'getUnique'], [m.name for m in self.observer.calledMethods])
         selectMethod = self.observer.calledMethods[1]
         self.assertEquals({'continueAfter':'0', 'oaiUntil':'2012-01-01T00:00:00Z', 'prefix':'oai_dc', 'oaiFrom':'2000-01-01T00:00:00Z', 'sets':['set0']}, selectMethod.kwargs)
-        recordMethods = self.observer.calledMethods[2:]
+        recordMethods = self.observer.calledMethods[3:]
         self.assertEquals({'recordId':'id:0&0', 'metadataPrefix':'oai_dc'}, recordMethods[0].kwargs)
         self.assertEquals({'recordId':'id:1&1', 'metadataPrefix':'oai_dc'}, recordMethods[1].kwargs)
 
@@ -122,10 +123,10 @@
 
         self.assertEquals(1, len(xpath(oai, '/oai:OAI-PMH/oai:ListRecords/mock:record')))
         self.assertEquals(0, len(xpath(oai, '/oai:OAI-PMH/oai:ListIdentifiers/oai:resumptionToken')))
-        self.assertEquals(['getAllPrefixes', 'oaiSelect', 'oaiRecord'], [m.name for m in self.observer.calledMethods])
+        self.assertEquals(['getAllPrefixes', 'oaiSelect', 'oaiWatermark', 'oaiRecord'], [m.name for m in self.observer.calledMethods])
         selectMethod = self.observer.calledMethods[1]
         self.assertEquals({'continueAfter':'unique_for_id', 'oaiUntil':'2012-01-01T00:00:00Z', 'prefix':'oai_dc', 'oaiFrom':'2000-01-01T00:00:00Z', 'sets':['set0']}, selectMethod.kwargs)
-        recordMethods = self.observer.calledMethods[2:]
+        recordMethods = self.observer.calledMethods[3:]
         self.assertEquals({'recordId':'id:2&2', 'metadataPrefix':'oai_dc'}, recordMethods[0].kwargs)
 
     def testListRecordsEmptyFinalResumptionToken(self):
@@ -138,10 +139,10 @@
         resumptionTokens = xpath(oai, '/oai:OAI-PMH/oai:ListRecords/oai:resumptionToken')
         self.assertEquals(1, len(resumptionTokens))
         self.assertEquals(None, resumptionTokens[0].text)
-        self.assertEquals(['getAllPrefixes', 'oaiSelect', 'oaiRecord', 'oaiRecord'], [m.name for m in self.observer.calledMethods])
+        self.assertEquals(['getAllPrefixes', 'oaiSelect', 'oaiWatermark', 'oaiRecord', 'oaiRecord'], [m.name for m in self.observer.calledMethods])
         selectMethod = self.observer.calledMethods[1]
         self.assertEquals({'continueAfter':'unique_for_id', 'oaiUntil':'2012-01-01T00:00:00Z', 'prefix':'oai_dc', 'oaiFrom':'2000-01-01T00:00:00Z', 'sets':['set0']}, selectMethod.kwargs)
-        recordMethods = self.observer.calledMethods[2:]
+        recordMethods = self.observer.calledMethods[3:]
         self.assertEquals({'recordId':'id:2&2', 'metadataPrefix':'oai_dc'}, recordMethods[0].kwargs)
         self.assertEquals({'recordId':'id:3&3', 'metadataPrefix':'oai_dc'}, recordMethods[1].kwargs)
 
@@ -168,10 +169,10 @@
 
         self.assertEquals(1, len(xpath(oai, '/oai:OAI-PMH/oai:ListRecords/mock:record')))
         self.assertEquals(1, len(xpath(oai, '/oai:OAI-PMH/oai:ListRecords/oai:resumptionToken/text()')))
-        self.assertEquals(['getAllPrefixes', 'oaiSelect', 'oaiRecord', 'getUnique'], [m.name for m in self.observer.calledMethods])
+        self.assertEquals(['getAllPrefixes', 'oaiSelect', 'oaiWatermark', 'oaiRecord', 'getUnique'], [m.name for m in self.observer.calledMethods])
         selectMethod = self.observer.calledMethods[1]
         self.assertEquals({'continueAfter':'0', 'oaiUntil':None, 'prefix':'oai_dc', 'oaiFrom':None, 'sets':None}, selectMethod.kwargs)
-        recordMethods = self.observer.calledMethods[2:]
+        recordMethods = self.observer.calledMethods[3:]
         self.assertEquals({'recordId':'id:1&1', 'metadataPrefix':'oai_dc'}, recordMethods[0].kwargs)
 
     def testListRecordsUsingXWaitWhenSetNotFound(self):
@@ -191,10 +192,10 @@
 
         self.assertEquals(1, len(xpath(oai, '/oai:OAI-PMH/oai:ListRecords/mock:record')))
         self.assertEquals(1, len(xpath(oai, '/oai:OAI-PMH/oai:ListRecords/oai:resumptionToken/text()')))
-        self.assertEquals(['getAllPrefixes', 'oaiSelect', 'oaiRecord', 'getUnique'], [m.name for m in self.observer.calledMethods])
+        self.assertEquals(['getAllPrefixes', 'oaiSelect', 'oaiWatermark', 'oaiRecord', 'getUnique'], [m.name for m in self.observer.calledMethods])
         selectMethod = self.observer.calledMethods[1]
         self.assertEquals({'continueAfter':'0', 'oaiUntil':None, 'prefix':'other_prefix', 'oaiFrom':None, 'sets':None}, selectMethod.kwargs)
-        recordMethods = self.observer.calledMethods[2:]
+        recordMethods = self.observer.calledMethods[3:]
         self.assertEquals({'recordId':'id:1&1', 'metadataPrefix':'other_prefix'}, recordMethods[0].kwargs)
 
     def testNotSupportedXWait(self):
@@ -226,7 +227,7 @@
             header, body = ''.join(compose(self.oaiList.listRecords(arguments=arguments, **self.httpkwargs))).split(CRLF*2)
             oai = parse(StringIO(body))
             self.assertEquals(0, len(xpath(oai, '//oai:error')), body)
-            self.assertEquals(['getAllPrefixes', 'oaiSelect', 'oaiRecord'], [m.name for m in self.observer.calledMethods])
+            self.assertEquals(['getAllPrefixes', 'oaiSelect', 'oaiWatermark', 'oaiRecord'], [m.name for m in self.observer.calledMethods])
             selectKwargs = self.observer.calledMethods[1].kwargs
             return selectKwargs['oaiFrom'], selectKwargs['oaiUntil']
 
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/test/oaipmhtest.py /home/johan/development/sourceforge/meresco-oai/workingsets/3.6.14-Seecr/version_1/test/oaipmhtest.py
--- version_0/test/oaipmhtest.py	2012-01-18 09:04:39.000000000 +0100
+++ version_1/test/oaipmhtest.py	2012-01-18 12:04:37.000000000 +0100
@@ -213,7 +213,6 @@
             self.assertEquals(1, len(descriptions))
         self.assertEquals(['Meresco'], xpath(descriptions[-1], 'toolkit:toolkit/toolkit:title/text()'))
 
-
     def testIdentifyWithDescription(self):
         self.oaipmh.addObserver(OaiBranding('http://meresco.org/files/images/meresco-logo-small.png', 'http://www.meresco.org/', 'Meresco'))
         header, body = self._request(verb=['Identify'])
@@ -227,6 +226,27 @@
             self.assertEquals(2, len(descriptions))
         self.assertEquals(['Meresco'], xpath(descriptions[-2], 'toolkit:toolkit/toolkit:title/text()'))
         self.assertEquals(['Meresco'], xpath(descriptions[-1], 'branding:branding/branding:collectionIcon/branding:title/text()'))
+    
+    def testWatermarking(self):
+        class OaiWatermark(object):
+            def oaiWatermark(this):
+                yield "<!-- Watermarked by Seecr -->"
+        self.oaipmh.addObserver(OaiWatermark())
+
+        def assertWaterMarked(**oaiArgs):
+            header, body = self._request(**oaiArgs)
+            try:
+                comment = xpath(body, "/oai:OAI-PMH/comment()")[0]
+            except:
+                print tostring(body, pretty_print=True)
+                raise
+            self.assertEquals(" Watermarked by Seecr ", comment.text)
+        assertWaterMarked(verb=["Identify"])
+        assertWaterMarked(verb=['ListRecords'], metadataPrefix=['prefix2'])
+        assertWaterMarked(verb=['ListIdentifiers'], metadataPrefix=['prefix2'])
+        assertWaterMarked(verb=['ListSets'])
+        assertWaterMarked(verb=['ListMetadataFormats'])
+        assertWaterMarked(verb=['GetRecord'], metadataPrefix=['oai_dc'], identifier=[self.prefix + 'record:id:11'])
 
     def testNoVerb(self):
         self.assertOaiError({}, additionalMessage='No "verb" argument found.', errorCode='badArgument')
