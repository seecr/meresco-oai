Changeset created on Tue Apr 09 08:59:01 UTC 2013 by Seecr (Seek You Too B.V.)

Description: OaiAddRecordWithDefaults now supports functions

    OaiAddRecordWithDefaults now supports functions to set the metadataFormats or
    sets. It is backwards compatible.

Baseline version: 4.1.8

From d58562a7bb81ec1c270d2e9f302accec0c0834b3 Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Tue, 9 Apr 2013 10:54:11 +0200
Subject: [PATCH] JPM/TJ: OaiAddRecordWithDefaults now supports function arguments.

---
 doc/license.conf                     |    6 ++--
 meresco/oai/oaiaddrecord.py          |   60 ++++++++++++++++++---------------
 test/oaiaddrecordwithdefaultstest.py |   40 ++++++++++++++++-------
 3 files changed, 64 insertions(+), 42 deletions(-)

diff --git a/doc/license.conf b/doc/license.conf
index 1b6f979..059c625 100644
--- a/doc/license.conf
+++ b/doc/license.conf
@@ -3,11 +3,11 @@
     "description": "\"Meresco Oai\" are components to build Oai repositories, based on\n\"Meresco Core\" and \"Meresco Components\".",
     "license": "GPLv2",
     "copyrights": [
-        {"name": "Seecr (Seek You Too B.V.)", "url": "http://seecr.nl", "years": [2012]},
-        {"name": "Stichting Kennisnet", "url": "http://www.kennisnet.nl", "years": [2012]}
+        {"name": "Seecr (Seek You Too B.V.)", "url": "http://seecr.nl", "years": [2013]},
+        {"name": "Stichting Bibliotheek.nl (BNL)", "url": "http://www.bibliotheek.nl", "years": [2013]}
     ],
     "copyrights_unused": [
-        {"name": "Stichting Bibliotheek.nl (BNL)", "url": "http://www.bibliotheek.nl", "years": [2012]},
+        {"name": "Stichting Kennisnet", "url": "http://www.kennisnet.nl", "years": [2012]},
         {"name": "SURF Foundation.", "url": "http://www.surf.nl", "years": [2007, 2008, 2009]},
         {"name": "Delft University of Technology", "url": "http://www.tudelft.nl", "years": [2009]},
         {"name": "Tilburg University", "url": "http://www.uvt.nl", "years": [2009]},
diff --git a/meresco/oai/oaiaddrecord.py b/meresco/oai/oaiaddrecord.py
index a00d9da..3263ebe 100644
--- a/meresco/oai/oaiaddrecord.py
+++ b/meresco/oai/oaiaddrecord.py
@@ -1,57 +1,69 @@
 ## begin license ##
-# 
+#
 # "Meresco Oai" are components to build Oai repositories, based on
-# "Meresco Core" and "Meresco Components". 
-# 
+# "Meresco Core" and "Meresco Components".
+#
 # Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
 # Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
 # Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
 # Copyright (C) 2009 Tilburg University http://www.uvt.nl
 # Copyright (C) 2010-2012 Stichting Kennisnet http://www.kennisnet.nl
-# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
-# 
+# Copyright (C) 2011-2013 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2013 Stichting Bibliotheek.nl (BNL) http://www.bibliotheek.nl
+#
 # This file is part of "Meresco Oai"
-# 
+#
 # "Meresco Oai" is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
-# 
+#
 # "Meresco Oai" is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
-# 
+#
 # You should have received a copy of the GNU General Public License
 # along with "Meresco Oai"; if not, write to the Free Software
 # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-# 
+#
 ## end license ##
 
 from meresco.core import Transparent, asyncreturn
 from lxml.etree import iselement
 
-namespaces = {
-    'oai': 'http://www.openarchives.org/OAI/2.0/',
-    'xsi': "http://www.w3.org/2001/XMLSchema-instance",
-}
 
-class OaiAddRecord(Transparent):
+class OaiAddRecordWithDefaults(Transparent):
+    def __init__(self, metadataFormats=None, sets=None):
+        Transparent.__init__(self)
+        self._sets = self._prepare(sets)
+        self._metadataFormats = self._prepare(metadataFormats)
+
+    @staticmethod
+    def _prepare(iterableOrCallable):
+        if iterableOrCallable is None:
+            return lambda: []
+        return iterableOrCallable if callable(iterableOrCallable) else lambda: iterableOrCallable
 
     @asyncreturn
+    def add(self, identifier, **kwargs):
+        self.do.addOaiRecord(identifier=identifier, sets=self._sets(), metadataFormats=self._metadataFormats())
+
+
+class OaiAddRecord(Transparent):
+    @asyncreturn
     def add(self, identifier, partname, lxmlNode):
         record = lxmlNode if iselement(lxmlNode) else lxmlNode.getroot()
         setSpecs = record.xpath('//oai:header/oai:setSpec/text()', namespaces=namespaces)
         sets = set((str(s), str(s)) for s in setSpecs)
-        
-        namespace = record.nsmap.get(record.prefix or None, '') 
+
+        namespace = record.nsmap.get(record.prefix or None, '')
         schemaLocations = record.xpath('@xsi:schemaLocation', namespaces=namespaces)
         ns2xsd = ''.join(schemaLocations).split()
         schema = dict(zip(ns2xsd[::2],ns2xsd[1::2])).get(namespace, '')
         schema, namespace = self._magicSchemaNamespace(record.prefix, partname, schema, namespace)
         metadataFormats=[(partname, schema, namespace)]
-
         self.do.addOaiRecord(identifier=identifier, sets=sets, metadataFormats=metadataFormats)
 
     def _magicSchemaNamespace(self, prefix, name, schema, namespace):
@@ -61,13 +73,7 @@ class OaiAddRecord(Transparent):
                 return schema or oldschema, namespace or oldnamespace
         return schema, namespace
 
-class OaiAddRecordWithDefaults(Transparent):
-    def __init__(self, metadataFormats=None, sets=None):
-        Transparent.__init__(self)
-        self._metadataFormats = metadataFormats if metadataFormats else []
-        self._sets = sets if sets else []
-
-    @asyncreturn
-    def add(self, identifier, **kwargs):
-        self.do.addOaiRecord(identifier=identifier, sets=self._sets, metadataFormats=self._metadataFormats)
-
+namespaces = {
+    'oai': 'http://www.openarchives.org/OAI/2.0/',
+    'xsi': "http://www.w3.org/2001/XMLSchema-instance",
+}
diff --git a/test/oaiaddrecordwithdefaultstest.py b/test/oaiaddrecordwithdefaultstest.py
index 04b4426..68d2e5e 100644
--- a/test/oaiaddrecordwithdefaultstest.py
+++ b/test/oaiaddrecordwithdefaultstest.py
@@ -1,27 +1,28 @@
 ## begin license ##
-# 
+#
 # "Meresco Oai" are components to build Oai repositories, based on
-# "Meresco Core" and "Meresco Components". 
-# 
-# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# "Meresco Core" and "Meresco Components".
+#
+# Copyright (C) 2012-2013 Seecr (Seek You Too B.V.) http://seecr.nl
 # Copyright (C) 2012 Stichting Kennisnet http://www.kennisnet.nl
-# 
+# Copyright (C) 2013 Stichting Bibliotheek.nl (BNL) http://www.bibliotheek.nl
+#
 # This file is part of "Meresco Oai"
-# 
+#
 # "Meresco Oai" is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
-# 
+#
 # "Meresco Oai" is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
-# 
+#
 # You should have received a copy of the GNU General Public License
 # along with "Meresco Oai"; if not, write to the Free Software
 # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-# 
+#
 ## end license ##
 
 from seecr.test import CallTrace
@@ -33,7 +34,7 @@ from meresco.oai import OaiAddRecordWithDefaults
 
 class OaiAddRecordWithDefaultsTest(TestCase):
     def testAdd(self):
-        subject = OaiAddRecordWithDefaults(sets="SETS", metadataFormats="METADATAFORMATS")
+        subject = OaiAddRecordWithDefaults(sets=[('setSpec', 'setName')], metadataFormats=[('prefix','schema','namespace')])
         observer = CallTrace('oaijazz')
         subject.addObserver(observer)
 
@@ -41,7 +42,22 @@ class OaiAddRecordWithDefaultsTest(TestCase):
 
         self.assertEquals(['addOaiRecord'], [m.name for m in observer.calledMethods])
         self.assertEquals({'identifier':'id',
-            'sets':'SETS',
-            'metadataFormats': 'METADATAFORMATS'},
+            'sets': [('setSpec', 'setName')],
+            'metadataFormats': [('prefix','schema','namespace')]},
             observer.calledMethods[0].kwargs)
 
+    def testAddWithMethods(self):
+        subject = OaiAddRecordWithDefaults(sets=lambda: [('setSpec', 'setName')], metadataFormats=lambda: [('prefix','schema','namespace')])
+        observer = CallTrace('oaijazz')
+        subject.addObserver(observer)
+
+        list(compose(subject.add('id', ignored="kwarg")))
+
+        self.assertEquals(['addOaiRecord'], [m.name for m in observer.calledMethods])
+        self.assertEquals({'identifier':'id',
+            'sets': [('setSpec', 'setName')],
+            'metadataFormats': [('prefix','schema','namespace')]},
+            observer.calledMethods[0].kwargs)
+
+
+
-- 
1.7.1

