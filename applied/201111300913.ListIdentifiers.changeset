Changeset created on Wed Nov 30 09:13:22 UTC 2011 by Seecr (Seek You Too B.V.)

Description: introduces support for ListIdentifiers

    OaiDownloadProcessor now takes an optional 'verb' parameter that can be used to make ListIdentifiers r    equests instead of ListRecords.

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-oai/workingsets/3.6.11-Natag/version_1

diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_1/meresco/oai/oaidownloadprocessor.py version_2/meresco/oai/oaidownloadprocessor.py
--- version_1/meresco/oai/oaidownloadprocessor.py	2011-11-30 10:10:56.000000000 +0100
+++ version_2/meresco/oai/oaidownloadprocessor.py	2011-11-30 10:06:52.000000000 +0100
@@ -46,7 +46,7 @@
 namespaces = {'oai': "http://www.openarchives.org/OAI/2.0/"}
 
 class OaiDownloadProcessor(Observable):
-    def __init__(self, path, metadataPrefix, workingDirectory, set=None, xWait=True, err=None):
+    def __init__(self, path, metadataPrefix, workingDirectory, set=None, xWait=True, err=None, verb=None):
         Observable.__init__(self)
         self._metadataPrefix = metadataPrefix
         self._resumptionToken = None
@@ -54,13 +54,13 @@
         self._xWait = xWait
         self._path = path
         self._err = err or stderr
-
+        self._verb = verb or 'ListRecords'
         isdir(workingDirectory) or makedirs(workingDirectory)
         self._stateFilePath = join(workingDirectory, "harvester.state")
         self._readState()
 
     def buildRequest(self):
-        arguments = [('verb', 'ListRecords')]
+        arguments = [('verb', self._verb)]
         if self._resumptionToken:
             arguments.append(('resumptionToken', self._resumptionToken))
         else:
@@ -73,20 +73,23 @@
         return statusline % (self._path, urlencode(arguments))
 
     def handle(self, lxmlNode):
+        errors = xpath(lxmlNode, "/oai:OAI-PMH/oai:error")
+        if len(errors) > 0:
+            for error in errors:
+                self._logError("%s: %s" % (error.get("code"), error.text))
+            self._resumptionToken = None
+            self._writeState()                
+            return
         try:
-            errors = xpath(lxmlNode, "/oai:OAI-PMH/oai:error")
-            if len(errors) > 0:
-                for error in errors:
-                    self._logError("%s: %s" % (error.get("code"), error.text))
-                self._resumptionToken = None
-            else:
-                records = xpath(lxmlNode, '/oai:OAI-PMH/oai:ListRecords/oai:record')
-                for record in records:
-                    datestamp = xpath(record, 'oai:header/oai:datestamp/text()')[0]
-                    identifier = xpath(record, 'oai:header/oai:identifier/text()')[0]
-                    yield self.asyncdo.add(identifier=identifier, lxmlNode=ElementTree(record), datestamp=datestamp)
-                    yield # some room for others
-                self._resumptionToken = head(xpath(lxmlNode, "/oai:OAI-PMH/oai:ListRecords/oai:resumptionToken/text()"))
+            verbNode = xpath(lxmlNode, "/oai:OAI-PMH/oai:%s" % self._verb)[0]
+            itemXPath, headerXPath = VERB_XPATHS[self._verb]
+            for item in xpath(verbNode, itemXPath):
+                header = xpath(item, headerXPath)[0]
+                datestamp = xpath(header, 'oai:datestamp/text()')[0]
+                identifier = xpath(header, 'oai:identifier/text()')[0]
+                yield self.asyncdo.add(identifier=identifier, lxmlNode=ElementTree(item), datestamp=datestamp)
+                yield # some room for others
+            self._resumptionToken = head(xpath(verbNode, "oai:resumptionToken/text()"))
         finally:
             self._writeState()
 
@@ -114,3 +117,7 @@
 
 RESUMPTIONTOKEN_STATE = "Resumptiontoken: "
 
+VERB_XPATHS = {
+    'ListRecords': ('oai:record', 'oai:header'),
+    'ListIdentifiers': ('oai:header', '.')
+}
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_1/test/oaidownloadprocessortest.py version_2/test/oaidownloadprocessortest.py
--- version_1/test/oaidownloadprocessortest.py	2011-11-30 10:10:56.000000000 +0100
+++ version_2/test/oaidownloadprocessortest.py	2011-11-30 10:06:52.000000000 +0100
@@ -45,11 +45,16 @@
 from weightless.core import compose
 from weightless.io import Suspend
 
+
 class OaiDownloadProcessorTest(CQ2TestCase):
     def testRequest(self):
         oaiDownloadProcessor = OaiDownloadProcessor(path="/oai", metadataPrefix="oai_dc", workingDirectory=self.tempdir, xWait=True)
         self.assertEquals("""GET /oai?verb=ListRecords&metadataPrefix=oai_dc&x-wait=True HTTP/1.0\r\n\r\n""", oaiDownloadProcessor.buildRequest())
 
+    def testListIdentifiersRequest(self):
+        oaiDownloadProcessor = OaiDownloadProcessor(path="/oai", metadataPrefix="oai_dc", workingDirectory=self.tempdir, xWait=True, verb='ListIdentifiers')
+        self.assertEquals("""GET /oai?verb=ListIdentifiers&metadataPrefix=oai_dc&x-wait=True HTTP/1.0\r\n\r\n""", oaiDownloadProcessor.buildRequest())
+
     def testSetInRequest(self):
         oaiDownloadProcessor = OaiDownloadProcessor(path="/oai", metadataPrefix="oai_dc", set="setName", workingDirectory=self.tempdir, xWait=True)
         self.assertEquals("""GET /oai?verb=ListRecords&metadataPrefix=oai_dc&set=setName&x-wait=True HTTP/1.0\r\n\r\n""", oaiDownloadProcessor.buildRequest())
@@ -71,6 +76,17 @@
         self.assertEquals('2011-08-22T07:34:00Z', observer.calledMethods[0].kwargs['datestamp'])
         self.assertEquals('oai:identifier:1', observer.calledMethods[0].kwargs['identifier'])
 
+    def testListIdentifiersHandle(self): 
+        observer = CallTrace()
+        oaiDownloadProcessor = OaiDownloadProcessor(path="/oai", metadataPrefix="oai_dc", workingDirectory=self.tempdir, xWait=True, verb='ListIdentifiers')
+        oaiDownloadProcessor.addObserver(observer)
+        list(compose(oaiDownloadProcessor.handle(parse(StringIO(LISTIDENTIFIERS_RESPONSE)))))
+        self.assertEquals(['add'], [m.name for m in observer.calledMethods])
+        self.assertEquals(0, len(observer.calledMethods[0].args))
+        self.assertEqualsWS(ONE_HEADER, tostring(observer.calledMethods[0].kwargs['lxmlNode']))
+        self.assertEquals('2011-08-22T07:34:00Z', observer.calledMethods[0].kwargs['datestamp'])
+        self.assertEquals('oai:identifier:1', observer.calledMethods[0].kwargs['identifier'])
+
     def testHandleWithTwoRecords(self): 
         observer = CallTrace()
         oaiDownloadProcessor = OaiDownloadProcessor(path="/oai", metadataPrefix="oai_dc", workingDirectory=self.tempdir, xWait=True)
@@ -167,7 +183,6 @@
         self.assertEquals([suspend, None], yields)
 
 
-
 ONE_RECORD = '<record xmlns="http://www.openarchives.org/OAI/2.0/"><header><identifier>oai:identifier:1</identifier><datestamp>2011-08-22T07:34:00Z</datestamp></header><metadata>ignored</metadata></record>'
 
 LISTRECORDS_RESPONSE = """<?xml version="1.0" encoding="UTF-8" ?>
@@ -179,7 +194,7 @@
     %s
   </ListRecords>
 </OAI-PMH>
-""" % (ONE_RECORD+"%s")
+""" % (ONE_RECORD + "%s")
 
 ERROR_RESPONSE = """<?xml version="1.0" encoding="UTF-8" ?>
 <OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/" 
@@ -197,3 +212,16 @@
       completeListSize="6" 
       cursor="0">x?y&amp;z</resumptionToken>"""
 
+ONE_HEADER = '<header xmlns="http://www.openarchives.org/OAI/2.0/"><identifier>oai:identifier:1</identifier><datestamp>2011-08-22T07:34:00Z</datestamp></header>'
+
+LISTIDENTIFIERS_RESPONSE = """<?xml version="1.0" encoding="UTF-8" ?>
+<OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/">
+  <responseDate>2002-06-01T19:20:30Z</responseDate>
+  <request verb="ListRecords" from="1998-01-15" 
+           metadataPrefix="dc">http://an.oa.org/OAI-script</request>
+  <ListIdentifiers>
+    %s
+  </ListIdentifiers>
+</OAI-PMH>
+""" % ONE_HEADER
+
