Changeset created on Thu Oct 04 15:30:24 UTC 2012 by Seecr (Seek You Too B.V.)

Description: the harveststate of a OaiDownloadProcessor can now be accessed

    The harvest state (resumption token + possible error) of an OaiDownloadProcessor instance
    can now be queries by means of the new 'getState' method. Also: 
    * refactored ResumptionToken is now available to parse Meresco OAI resumption tokens
    * stamp2zulutime can be used for a human readable display of a resumptionToken's 
      continueAfter part.

Baseline version: 4.0.9

From 341bb6a2e75ffea30e1084eb23e285e6ebc7c89a Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Thu, 4 Oct 2012 10:28:08 +0100
Subject: [PATCH 1/4] JPM/TJ: Added getState to OaiDownloadProcessor

- also refactored ResumptionToken
---
 meresco/oai/__init__.py             |    3 +-
 meresco/oai/oaidownloadprocessor.py |   12 +++++++
 meresco/oai/oaijazz.py              |   15 ++++++--
 meresco/oai/oailist.py              |   62 ++++++++++++++++++-----------------
 meresco/oai/resumptiontoken.py      |   54 +++++++++++++-----------------
 test/oaidownloadprocessortest.py    |    7 ++++
 test/oaijazztest.py                 |    8 ++++-
 test/resumptiontokentest.py         |   11 +++++-
 8 files changed, 104 insertions(+), 68 deletions(-)

diff --git a/meresco/oai/__init__.py b/meresco/oai/__init__.py
index 1c2acc2..ec4fc40 100644
--- a/meresco/oai/__init__.py
+++ b/meresco/oai/__init__.py
@@ -11,6 +11,7 @@
 # Copyright (C) 2010 Maastricht University Library http://www.maastrichtuniversity.nl/web/Library/home.htm
 # Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
 # Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://www.bibliotheek.nl
 # 
 # This file is part of "Meresco Oai"
 # 
@@ -36,7 +37,7 @@ from oaisetmask import OaiSetMask
 from oaisetselect import OaiSetSelect # deprecated
 from oaiidentifierrename import OaiIdentifierRename
 from fields2oairecord import Fields2OaiRecord
-from oaijazz import OaiJazz
+from oaijazz import OaiJazz, stamp2zulutime
 from oaiaddrecord import OaiAddRecord, OaiAddRecordWithDefaults
 from oaidownloadprocessor import OaiDownloadProcessor
 from updateadapter import UpdateAdapterFromOaiDownloadProcessor
diff --git a/meresco/oai/oaidownloadprocessor.py b/meresco/oai/oaidownloadprocessor.py
index 65c4185..e24e825 100644
--- a/meresco/oai/oaidownloadprocessor.py
+++ b/meresco/oai/oaidownloadprocessor.py
@@ -116,6 +116,18 @@ class OaiDownloadProcessor(Observable):
             self._err.write('\n')
         self._err.flush()
 
+    def getState(self):
+        return HarvestStateView(self)
+
+class HarvestStateView(object):
+    def __init__(self, oaiDownloadProcessor):
+        self._processor = oaiDownloadProcessor
+
+    @property
+    def resumptionToken(self):
+        return self._processor._resumptionToken
+
+
 def head(l):
     return l[0] if l else ""
 
diff --git a/meresco/oai/oaijazz.py b/meresco/oai/oaijazz.py
index c17e394..7a91967 100644
--- a/meresco/oai/oaijazz.py
+++ b/meresco/oai/oaijazz.py
@@ -137,10 +137,9 @@ class OaiJazz(object):
                 
     def getDatestamp(self, identifier):
         stamp = self.getUnique(identifier)
-        if stamp == None:
+        if stamp is None:
             return None
-        microseconds = ".%s" % (stamp % DATESTAMP_FACTOR) if self._preciseDatestamp else ""
-        return "%s%sZ" % (strftime('%Y-%m-%dT%H:%M:%S', gmtime(stamp/DATESTAMP_FACTOR_FLOAT)), microseconds)
+        return _stamp2zulutime(stamp=stamp, preciseDatestamp=self._preciseDatestamp)
 
     def getUnique(self, identifier):
         if hasattr(identifier, 'stamp'):
@@ -149,7 +148,7 @@ class OaiJazz(object):
 
     def isDeleted(self, identifier):
         stamp = self.getUnique(identifier)
-        if stamp == None:
+        if stamp is None:
             return False
         return stamp in self._tombStones
 
@@ -349,3 +348,11 @@ def _flattenSetHierarchy(sets):
 def safeString(aString):
     return str(aString) if isinstance(aString, unicode) else aString
 
+def stamp2zulutime(stamp):
+    if stamp is None:
+        return ''
+    return _stamp2zulutime(int(stamp))
+
+def _stamp2zulutime(stamp, preciseDatestamp=False):
+    microseconds = ".%s" % (stamp % DATESTAMP_FACTOR) if preciseDatestamp else ""
+    return "%s%sZ" % (strftime('%Y-%m-%dT%H:%M:%S', gmtime(stamp/DATESTAMP_FACTOR_FLOAT)), microseconds)
diff --git a/meresco/oai/oailist.py b/meresco/oai/oailist.py
index e4e6b2e..bd5dc2e 100644
--- a/meresco/oai/oailist.py
+++ b/meresco/oai/oailist.py
@@ -9,6 +9,7 @@
 # Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
 # Copyright (C) 2009 Tilburg University http://www.uvt.nl
 # Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://www.bibliotheek.nl
 # Copyright (C) 2012 Stichting Kennisnet http://www.kennisnet.nl
 # 
 # This file is part of "Meresco Oai"
@@ -152,44 +153,44 @@ Error and Exception Conditions
             token = resumptionTokenFromString(validatedArguments['resumptionToken'])
             if not token:
                 raise OaiException("badResumptionToken")
-            continueAfter = token._continueAfter
-            _from = token._from
-            _until = token._until
-            _set = token._set
-            _metadataPrefix = token._metadataPrefix
+            continueAfter = token.continueAfter
+            from_ = token.from_
+            until = token.until
+            set_ = token.set_
+            metadataPrefix = token.metadataPrefix
         else:
             continueAfter = '0'
-            _from = validatedArguments.get('from', None)
-            _until = validatedArguments.get('until', None)
-            _set = validatedArguments.get('set', None)
-            _metadataPrefix = validatedArguments.get('metadataPrefix', None)
+            from_ = validatedArguments.get('from', None)
+            until = validatedArguments.get('until', None)
+            set_ = validatedArguments.get('set', None)
+            metadataPrefix = validatedArguments.get('metadataPrefix', None)
 
             try:
-                _from = _from and ISO8601(_from)
-                _until = _until and ISO8601(_until) 
-                if _from and _until:
-                    if _from.isShort() != _until.isShort():
+                from_ = from_ and ISO8601(from_)
+                until = until and ISO8601(until) 
+                if from_ and until:
+                    if from_.isShort() != until.isShort():
                         raise OaiBadArgumentException('From and/or until arguments must match in length.')
-                    if str(_from) > str(_until):
+                    if str(from_) > str(until):
                         raise OaiBadArgumentException('From argument must be smaller than until argument.')
-                _from = _from and _from.floor()
-                _until = _until and _until.ceil()
+                from_ = from_ and from_.floor()
+                until = until and until.ceil()
             except ISO8601Exception, e:
                 raise OaiBadArgumentException('From and/or until arguments are faulty.')
 
-        if not _metadataPrefix in set(self.call.getAllPrefixes()):
+        if not metadataPrefix in set(self.call.getAllPrefixes()):
             raise OaiException('cannotDisseminateFormat')
 
-        validatedArguments['from'] = _from
-        validatedArguments['until'] = _until
-        validatedArguments['set'] = _set
-        validatedArguments['metadataPrefix'] = _metadataPrefix
+        validatedArguments['from'] = from_
+        validatedArguments['until'] = until
+        validatedArguments['set'] = set_
+        validatedArguments['metadataPrefix'] = metadataPrefix
         result = self.call.oaiSelect(
-            sets=[_set] if _set else None,
-            prefix=_metadataPrefix,
+            sets=[set_] if set_ else None,
+            prefix=metadataPrefix,
             continueAfter=continueAfter,
-            oaiFrom=_from,
-            oaiUntil=_until)
+            oaiFrom=from_,
+            oaiUntil=until)
         try:
             firstRecord = result.next()
             return chain(iter([firstRecord]), result)
@@ -205,11 +206,12 @@ Error and Exception Conditions
             if not 'x-wait' in validatedArguments:
                 results.next()
             yield '<resumptionToken>%s</resumptionToken>' % ResumptionToken(
-                validatedArguments['metadataPrefix'],
-                self.call.getUnique(recordId),
-                validatedArguments['from'],
-                validatedArguments['until'],
-                validatedArguments['set'])
+                    metadataPrefix=validatedArguments['metadataPrefix'],
+                    continueAfter=self.call.getUnique(recordId),
+                    from_=validatedArguments['from'],
+                    until=validatedArguments['until'],
+                    set_=validatedArguments['set']
+                )
             return
         except StopIteration:
             pass
diff --git a/meresco/oai/resumptiontoken.py b/meresco/oai/resumptiontoken.py
index 9b8fea2..983e6dc 100644
--- a/meresco/oai/resumptiontoken.py
+++ b/meresco/oai/resumptiontoken.py
@@ -9,6 +9,7 @@
 # Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
 # Copyright (C) 2009 Tilburg University http://www.uvt.nl
 # Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://www.bibliotheek.nl
 # 
 # This file is part of "Meresco Oai"
 # 
@@ -31,9 +32,7 @@
 
 def resumptionTokenFromString(s):
     try:
-        result = ResumptionToken()
-        result.loadString(s)
-        return result
+        return ResumptionToken.fromString(s)
     except ResumptionTokenException, e:
         return None
 
@@ -43,27 +42,22 @@ class ResumptionTokenException(Exception):
 class ResumptionToken:
 
     SHORT = {
-        'm': '_metadataPrefix',
-        'c': '_continueAfter',
-        'f': '_from',
-        'u': '_until',
-        's': '_set'}
+        'm': 'metadataPrefix',
+        'c': 'continueAfter',
+        'f': 'from_',
+        'u': 'until',
+        's': 'set_'
+    }
 
-    def __init__(self,
-        _metadataPrefix = '',
-        _continueAfter = '0',
-        _from = '',
-        _until = '',
-        _set = ''):
-        self._metadataPrefix = _metadataPrefix
-        self._continueAfter = _continueAfter
-        self._from = _from or '' #blank out "None"
-        self._until = _until or ''
-        self._set = _set or ''
+    def __init__(self, metadataPrefix='', continueAfter='0', from_='', until='', set_=''):
+        self.metadataPrefix = metadataPrefix
+        self.continueAfter = continueAfter
+        self.from_ = from_ or '' #blank out "None"
+        self.until = until or ''
+        self.set_ = set_ or ''
 
     def __str__(self):
-        short = ResumptionToken.SHORT
-        return '|'.join(map(lambda k: "%s%s" %(k, self.__dict__[short[k]]), short.keys()))
+        return '|'.join("%s%s" % (key, getattr(self, attr)) for key, attr in self.SHORT.items())
 
     def __repr__(self):
         return repr(str(self))
@@ -71,15 +65,15 @@ class ResumptionToken:
     def __eq__(self, other):
         return \
             ResumptionToken == other.__class__ and \
-            self._metadataPrefix == other._metadataPrefix and \
-            self._continueAfter == other._continueAfter and \
-            self._from == other._from and \
-            self._until == other._until and \
-            self._set == other._set
+            self.metadataPrefix == other.metadataPrefix and \
+            self.continueAfter == other.continueAfter and \
+            self.from_ == other.from_ and \
+            self.until == other.until and \
+            self.set_ == other.set_
 
-    def loadString(self, s):
+    @classmethod
+    def fromString(cls, s):
         resumptDict = dict(((part[0], part[1:]) for part in s.split('|') if part))
-        if set(ResumptionToken.SHORT.keys()) != set(resumptDict.keys()):
+        if set(cls.SHORT.keys()) != set(resumptDict.keys()):
             raise ResumptionTokenException()
-        for k,v in resumptDict.items():
-            setattr(self, ResumptionToken.SHORT[k], v)
+        return cls(**dict((cls.SHORT[k],v) for k,v in resumptDict.items()))
diff --git a/test/oaidownloadprocessortest.py b/test/oaidownloadprocessortest.py
index b52da3d..bba162a 100644
--- a/test/oaidownloadprocessortest.py
+++ b/test/oaidownloadprocessortest.py
@@ -188,6 +188,13 @@ class OaiDownloadProcessorTest(SeecrTestCase):
         yields = list(compose(oaiDownloadProcessor.handle(parse(StringIO(LISTRECORDS_RESPONSE % '')))))
         self.assertEquals([suspend, None], yields)
 
+    def testHarvesterState(self):
+        observer = CallTrace()
+        oaiDownloadProcessor = OaiDownloadProcessor(path="/oai", metadataPrefix="oai_dc", workingDirectory=self.tempdir, xWait=True, err=StringIO())
+        oaiDownloadProcessor.addObserver(observer)
+        list(oaiDownloadProcessor.handle(parse(StringIO(LISTRECORDS_RESPONSE % RESUMPTION_TOKEN))))
+        self.assertEquals("x?y&z", oaiDownloadProcessor.getState().resumptionToken)
+
 
 ONE_RECORD = '<record xmlns="http://www.openarchives.org/OAI/2.0/"><header><identifier>oai:identifier:1</identifier><datestamp>2011-08-22T07:34:00Z</datestamp></header><metadata>ignored</metadata></record>'
 
diff --git a/test/oaijazztest.py b/test/oaijazztest.py
index 8b5c02a..6df2d84 100644
--- a/test/oaijazztest.py
+++ b/test/oaijazztest.py
@@ -39,7 +39,7 @@ from shutil import rmtree
 from time import time, strptime, sleep
 from calendar import timegm
 
-from meresco.oai import OaiJazz, OaiAddRecord
+from meresco.oai import OaiJazz, OaiAddRecord, stamp2zulutime
 from meresco.oai.oaijazz import _flattenSetHierarchy, RecordId, SETSPEC_SEPARATOR
 from meresco.oai.oailist import OaiList
 from StringIO import StringIO
@@ -639,3 +639,9 @@ class OaiJazzTest(SeecrTestCase):
         self.assertEquals([True], resumed)
         self.assertEquals([], self.jazz._suspended)
 
+    def testStamp2Zulutime(self):
+        self.assertEquals("2012-10-04T09:21:04Z", stamp2zulutime("1349342464630008"))
+        self.assertEquals("", stamp2zulutime(None))
+        self.assertRaises(Exception, stamp2zulutime, "not-a-stamp")
+
+
diff --git a/test/resumptiontokentest.py b/test/resumptiontokentest.py
index 914d5eb..bb11b35 100644
--- a/test/resumptiontokentest.py
+++ b/test/resumptiontokentest.py
@@ -9,6 +9,7 @@
 # Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
 # Copyright (C) 2009 Tilburg University http://www.uvt.nl
 # Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://www.bibliotheek.nl
 # 
 # This file is part of "Meresco Oai"
 # 
@@ -40,7 +41,13 @@ class ResumptionTokenTest(SeecrTestCase):
     
     def testResumptionToken(self):
         self.assertResumptionToken(ResumptionToken())
-        self.assertResumptionToken(ResumptionToken('oai:dc', '100', '2002-06-01T19:20:30Z', '2002-06-01T19:20:39Z', 'some:set:name'))
-        self.assertResumptionToken(ResumptionToken(_set=None))
+        resumptionToken = ResumptionToken(metadataPrefix='oai:dc', continueAfter='100', from_='2002-06-01T19:20:30Z', until='2002-06-01T19:20:39Z', set_='some:set:name')
+        self.assertResumptionToken(resumptionToken)
+        self.assertEquals('oai:dc', resumptionToken.metadataPrefix)
+        self.assertEquals('100', resumptionToken.continueAfter)
+        self.assertEquals('2002-06-01T19:20:30Z', resumptionToken.from_)
+        self.assertEquals('2002-06-01T19:20:39Z', resumptionToken.until)
+        self.assertEquals('some:set:name', resumptionToken.set_)
+        self.assertResumptionToken(ResumptionToken(set_=None))
 
     
-- 
1.7.1


From 5bc3cf76d7aa053cdcc799ee5fa014c78a772551 Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Thu, 4 Oct 2012 11:08:48 +0100
Subject: [PATCH 2/4] JPM/TJ: persisting error state.

---
 deps.txt                            |    1 +
 meresco/oai/oaidownloadprocessor.py |   32 +++++++++++++++++++++++++++-----
 test/oaidownloadprocessortest.py    |   26 ++++++++++++++++++++++++--
 3 files changed, 52 insertions(+), 7 deletions(-)

diff --git a/deps.txt b/deps.txt
index f8166eb..28ac789 100644
--- a/deps.txt
+++ b/deps.txt
@@ -8,3 +8,4 @@ python-escaping (>= 0.1)
 python-escaping (<< 0.2)
 python-lxml (>= 2.1)
 python-lxml (<< 3.0)
+python-simplejson
diff --git a/meresco/oai/oaidownloadprocessor.py b/meresco/oai/oaidownloadprocessor.py
index e24e825..389bde7 100644
--- a/meresco/oai/oaidownloadprocessor.py
+++ b/meresco/oai/oaidownloadprocessor.py
@@ -42,6 +42,7 @@ from meresco.components.http.utils import CRLF
 from sys import stderr, stdout
 from time import time
 from tempfile import mkstemp
+from simplejson import dump, loads
 
 
 namespaces = {'oai': "http://www.openarchives.org/OAI/2.0/"}
@@ -51,6 +52,7 @@ class OaiDownloadProcessor(Observable):
         Observable.__init__(self)
         self._metadataPrefix = metadataPrefix
         self._resumptionToken = None
+        self._errorState = None
         self._set = set
         self._xWait = xWait
         self._path = path
@@ -77,7 +79,8 @@ class OaiDownloadProcessor(Observable):
         errors = xpath(lxmlNode, "/oai:OAI-PMH/oai:error")
         if len(errors) > 0:
             for error in errors:
-                self._logError("%s: %s" % (error.get("code"), error.text))
+                self._errorState = "%s: %s" % (error.get("code"), error.text)
+                self._logError(self._errorState)
             self._resumptionToken = None
             self._writeState()                
             return
@@ -90,25 +93,40 @@ class OaiDownloadProcessor(Observable):
                 identifier = xpath(header, 'oai:identifier/text()')[0]
                 try:
                     yield self.all.add(identifier=identifier, lxmlNode=ElementTree(item), datestamp=datestamp)
-                except:
+                except Exception, e:
                     self._logError(format_exc())
                     self._logError("While processing:")
                     self._logError(tostring(item))
+                    self._errorState = "ERROR while processing '%s': %s" % (identifier, str(e))
                     raise
+                self._errorState = None
                 yield # some room for others
             self._resumptionToken = head(xpath(verbNode, "oai:resumptionToken/text()"))
         finally:
             self._writeState()
 
     def _writeState(self):
-        open(self._stateFilePath, 'w').write("%s%s" % (RESUMPTIONTOKEN_STATE, self._resumptionToken))
+        with open(self._stateFilePath, 'w') as f:
+            dump({
+                'resumptionToken': self._resumptionToken,
+                'errorState': self._errorState,
+            },f)
 
     def _readState(self):
         self._resumptionToken = ''
+        self._errorState = None
         if isfile(self._stateFilePath):
             state = open(self._stateFilePath).read()
-            if RESUMPTIONTOKEN_STATE in state:
-                self._resumptionToken = state.split(RESUMPTIONTOKEN_STATE)[-1].strip()
+            if not state.startswith('{'):
+                if RESUMPTIONTOKEN_STATE in state:
+                    self._resumptionToken = state.split(RESUMPTIONTOKEN_STATE)[-1].strip()
+                self._writeState()
+                return
+            d = loads(state)
+            self._resumptionToken = d['resumptionToken']
+            self._errorState = d['errorState']
+
+
 
     def _logError(self, message):
         self._err.write(message)
@@ -124,6 +142,10 @@ class HarvestStateView(object):
         self._processor = oaiDownloadProcessor
 
     @property
+    def errorState(self):
+        return self._processor._errorState
+
+    @property
     def resumptionToken(self):
         return self._processor._resumptionToken
 
diff --git a/test/oaidownloadprocessortest.py b/test/oaidownloadprocessortest.py
index bba162a..1b2ba8d 100644
--- a/test/oaidownloadprocessortest.py
+++ b/test/oaidownloadprocessortest.py
@@ -130,7 +130,6 @@ class OaiDownloadProcessorTest(SeecrTestCase):
         oaiDownloadProcessor.addObserver(observer)
         list(oaiDownloadProcessor.handle(parse(StringIO(LISTRECORDS_RESPONSE % RESUMPTION_TOKEN))))
         self.assertEquals('x?y&z', oaiDownloadProcessor._resumptionToken)
-        self.assertEquals('Resumptiontoken: x?y&z', open(oaiDownloadProcessor._stateFilePath).read())
         self.assertEquals('GET /oai?verb=ListRecords&resumptionToken=x%3Fy%26z&x-wait=True HTTP/1.0\r\n\r\n', oaiDownloadProcessor.buildRequest())
         oaiDownloadProcessor = OaiDownloadProcessor(path="/oai", metadataPrefix="oai_dc", workingDirectory=self.tempdir, xWait=True, err=StringIO())
         self.assertEquals('x?y&z', oaiDownloadProcessor._resumptionToken)
@@ -193,8 +192,31 @@ class OaiDownloadProcessorTest(SeecrTestCase):
         oaiDownloadProcessor = OaiDownloadProcessor(path="/oai", metadataPrefix="oai_dc", workingDirectory=self.tempdir, xWait=True, err=StringIO())
         oaiDownloadProcessor.addObserver(observer)
         list(oaiDownloadProcessor.handle(parse(StringIO(LISTRECORDS_RESPONSE % RESUMPTION_TOKEN))))
-        self.assertEquals("x?y&z", oaiDownloadProcessor.getState().resumptionToken)
+        state = oaiDownloadProcessor.getState()
+        self.assertEquals("x?y&z", state.resumptionToken)
+        self.assertEquals(None, state.errorState)
 
+        oaiDownloadProcessor2 = OaiDownloadProcessor(path="/oai", metadataPrefix="oai_dc", workingDirectory=self.tempdir, xWait=True, err=StringIO())
+        state2 = oaiDownloadProcessor2.getState()
+        self.assertEquals("x?y&z", state2.resumptionToken)
+        self.assertEquals(None, state2.errorState)
+
+    def testHarvesterStateWithError(self):
+        resumptionToken = "u|c1286437597991025|mprefix|s|f"
+        open(join(self.tempdir, 'harvester.state'), 'w').write("Resumptiontoken: %s\n" % resumptionToken)
+        observer = CallTrace()
+        observer.exceptions={'add': Exception("Could be anything")}
+        oaiDownloadProcessor = OaiDownloadProcessor(path="/oai", metadataPrefix="oai_dc", workingDirectory=self.tempdir, xWait=True, err=StringIO())
+        oaiDownloadProcessor.addObserver(observer)
+        self.assertRaises(Exception, lambda: list(compose(oaiDownloadProcessor.handle(parse(StringIO(LISTRECORDS_RESPONSE))))))
+        state = oaiDownloadProcessor.getState()
+        self.assertEquals(resumptionToken, state.resumptionToken)
+        self.assertEquals("ERROR while processing 'oai:identifier:1': Could be anything", state.errorState)
+
+        oaiDownloadProcessor2 = OaiDownloadProcessor(path="/oai", metadataPrefix="oai_dc", workingDirectory=self.tempdir, xWait=True, err=StringIO())
+        state2 = oaiDownloadProcessor2.getState()
+        self.assertEquals(resumptionToken, state2.resumptionToken)
+        self.assertEquals("ERROR while processing 'oai:identifier:1': Could be anything", state2.errorState)
 
 ONE_RECORD = '<record xmlns="http://www.openarchives.org/OAI/2.0/"><header><identifier>oai:identifier:1</identifier><datestamp>2011-08-22T07:34:00Z</datestamp></header><metadata>ignored</metadata></record>'
 
-- 
1.7.1


From d7b649a96b9acc68fb05c5e4ed6744ded8931dae Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Thu, 4 Oct 2012 12:29:15 +0100
Subject: [PATCH 3/4] JPM/TJ: add name to the state

---
 meresco/oai/oaidownloadprocessor.py |    6 +++---
 test/oaidownloadprocessortest.py    |    3 ++-
 2 files changed, 5 insertions(+), 4 deletions(-)

diff --git a/meresco/oai/oaidownloadprocessor.py b/meresco/oai/oaidownloadprocessor.py
index 389bde7..610eebe 100644
--- a/meresco/oai/oaidownloadprocessor.py
+++ b/meresco/oai/oaidownloadprocessor.py
@@ -48,8 +48,8 @@ from simplejson import dump, loads
 namespaces = {'oai': "http://www.openarchives.org/OAI/2.0/"}
 
 class OaiDownloadProcessor(Observable):
-    def __init__(self, path, metadataPrefix, workingDirectory, set=None, xWait=True, err=None, verb=None):
-        Observable.__init__(self)
+    def __init__(self, path, metadataPrefix, workingDirectory, set=None, xWait=True, err=None, verb=None, name=None):
+        Observable.__init__(self, name=name)
         self._metadataPrefix = metadataPrefix
         self._resumptionToken = None
         self._errorState = None
@@ -140,6 +140,7 @@ class OaiDownloadProcessor(Observable):
 class HarvestStateView(object):
     def __init__(self, oaiDownloadProcessor):
         self._processor = oaiDownloadProcessor
+        self.name = oaiDownloadProcessor.observable_name()
 
     @property
     def errorState(self):
@@ -149,7 +150,6 @@ class HarvestStateView(object):
     def resumptionToken(self):
         return self._processor._resumptionToken
 
-
 def head(l):
     return l[0] if l else ""
 
diff --git a/test/oaidownloadprocessortest.py b/test/oaidownloadprocessortest.py
index 1b2ba8d..0066e7a 100644
--- a/test/oaidownloadprocessortest.py
+++ b/test/oaidownloadprocessortest.py
@@ -206,12 +206,13 @@ class OaiDownloadProcessorTest(SeecrTestCase):
         open(join(self.tempdir, 'harvester.state'), 'w').write("Resumptiontoken: %s\n" % resumptionToken)
         observer = CallTrace()
         observer.exceptions={'add': Exception("Could be anything")}
-        oaiDownloadProcessor = OaiDownloadProcessor(path="/oai", metadataPrefix="oai_dc", workingDirectory=self.tempdir, xWait=True, err=StringIO())
+        oaiDownloadProcessor = OaiDownloadProcessor(path="/oai", metadataPrefix="oai_dc", workingDirectory=self.tempdir, xWait=True, err=StringIO(), name="Name")
         oaiDownloadProcessor.addObserver(observer)
         self.assertRaises(Exception, lambda: list(compose(oaiDownloadProcessor.handle(parse(StringIO(LISTRECORDS_RESPONSE))))))
         state = oaiDownloadProcessor.getState()
         self.assertEquals(resumptionToken, state.resumptionToken)
         self.assertEquals("ERROR while processing 'oai:identifier:1': Could be anything", state.errorState)
+        self.assertEquals("Name", state.name)
 
         oaiDownloadProcessor2 = OaiDownloadProcessor(path="/oai", metadataPrefix="oai_dc", workingDirectory=self.tempdir, xWait=True, err=StringIO())
         state2 = oaiDownloadProcessor2.getState()
-- 
1.7.1


From 6b9746ff16971372f0bf66b90209c9a0c28deb26 Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Thu, 4 Oct 2012 14:59:10 +0100
Subject: [PATCH 4/4] TJ/JPM: exposing meresco.oai.ResumptionToken

---
 meresco/oai/__init__.py |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)

diff --git a/meresco/oai/__init__.py b/meresco/oai/__init__.py
index ec4fc40..cafeb26 100644
--- a/meresco/oai/__init__.py
+++ b/meresco/oai/__init__.py
@@ -42,3 +42,4 @@ from oaiaddrecord import OaiAddRecord, OaiAddRecordWithDefaults
 from oaidownloadprocessor import OaiDownloadProcessor
 from updateadapter import UpdateAdapterFromOaiDownloadProcessor
 from oaibranding import OaiBranding
+from resumptiontoken import ResumptionToken
-- 
1.7.1

