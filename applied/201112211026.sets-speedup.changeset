Changeset created on Wed Dec 21 10:26:22 UTC 2011 by Seecr (Seek You Too B.V.)

Description: ListRecords with a set parameter can now be evaluated faster.

    Optimization by slicing the set stampIds on resumptionToken before comparing to all matching stampIds.

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-oai/workingsets/3.6.12-Natag/version_0

diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/oai/oaijazz.py /home/hendrik/development/meresco/meresco-oai/workingsets/3.6.12-Natag/version_1/meresco/oai/oaijazz.py
--- version_0/meresco/oai/oaijazz.py	2011-12-21 11:23:26.000000000 +0100
+++ version_1/meresco/oai/oaijazz.py	2011-12-21 11:26:16.000000000 +0100
@@ -99,19 +99,23 @@
         sets = [] if sets == None else sets
         start = max(int(continueAfter)+1, self._fromTime(oaiFrom))
         stop = self._untilTime(oaiUntil)
-        stampIds = self._prefixes.get(prefix, [])
-        if stop:
-            stampIds = stampIds[bisect_left(stampIds,start):bisect_left(stampIds,stop)]
-        else:
-            stampIds = stampIds[bisect_left(stampIds,start):]
+        stampIds = self._sliceStampIds(self._prefixes.get(prefix, []), start, stop)
         if sets:
-            allStampIdsFromSets = (self._sets.get(setSpec,[]) for setSpec in sets)
+            allStampIdsFromSets = (
+                self._sliceStampIds(self._sets.get(setSpec, []), start, stop)
+                for setSpec in sets
+            )
             stampIds = AndIterator(stampIds,
                 reduce(OrIterator, allStampIdsFromSets))
         #WrapIterable to fool Observable's any message
         idAndStamps = ((self._getIdentifier(stampId), stampId) for stampId in stampIds)
         return WrapIterable((RecordId(identifier, stampId) for identifier, stampId in idAndStamps if not identifier is None))
                 
+    def _sliceStampIds(self, stampIds, start, stop):
+        if stop:
+            return stampIds[bisect_left(stampIds, start):bisect_left(stampIds, stop)]
+        return stampIds[bisect_left(stampIds, start):]
+
     def getDatestamp(self, identifier):
         stamp = self.getUnique(identifier)
         if stamp == None:
