Changeset created on Tue Apr 12 17:40:49 CEST 2011 by Seek You Too

Description: Explicit configure support x-wait

    Added parameter to OaiPmh for explicitly stating is supports x-wait.
    Previous version could cause the server to be non-responsive.

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-oai/workingsets/3.4.6-Edurep/version_0

diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/meresco/oai/__init__.py version_1/meresco/oai/__init__.py
--- version_0/meresco/oai/__init__.py	2011-04-12 17:38:52.000000000 +0200
+++ version_1/meresco/oai/__init__.py	2011-04-12 17:40:27.000000000 +0200
@@ -37,7 +37,6 @@
 from fields2oairecord import Fields2OaiRecordTx
 from oaijazz import OaiJazz
 from oaiaddrecord import OaiAddRecord, OaiAddRecordWithDefaults
-from oaisuspend import OaiSuspend
 from oaiharvester import OaiHarvester
 from updateadapter import UpdateAdapterFromOaiHarvester
 from oaibranding import OaiBranding
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/meresco/oai/oaijazz.py version_1/meresco/oai/oaijazz.py
--- version_0/meresco/oai/oaijazz.py	2011-04-12 17:38:52.000000000 +0200
+++ version_1/meresco/oai/oaijazz.py	2011-04-12 17:40:27.000000000 +0200
@@ -37,6 +37,7 @@
 from meresco.components.sorteditertools import OrIterator, AndIterator, WrapIterable
 from meresco.components import PersistentSortedIntegerList, DoubleUniqueBerkeleyDict, BerkeleyDict
 from sys import maxint
+from weightless.http import Suspend
 
 from bisect import bisect_left
 
@@ -62,6 +63,7 @@
         self._tombStones = PersistentSortedIntegerList(join(self._directory, 'tombStones.list'), use64bits=True, mergeTrigger=MERGE_TRIGGER)
         self._identifier2setSpecs = BerkeleyDict(join(self._directory, 'identifier2setSpecs'))
         self._read()
+        self._suspended = []
 
     def addOaiRecord(self, identifier, sets=None, metadataFormats=None):
         sets = [] if sets == None else sets
@@ -77,6 +79,7 @@
         setSpecs.update(oldSets)
         self._add(stamp, identifier, setSpecs, prefixes)
         self._storeMetadataFormats(metadataFormats)
+        self._resume()
 
     def delete(self, identifier):
         oldPrefixes, oldSets = self._delete(identifier)
@@ -85,6 +88,7 @@
         stamp = self._stamp()
         self._add(stamp, identifier, oldSets, oldPrefixes)
         self._tombStones.append(stamp)
+        self._resume()
 
     def oaiSelect(self, sets=None, prefix='oai_dc', continueAfter='0', oaiFrom=None, oaiUntil=None):
         sets = [] if sets == None else sets
@@ -142,6 +146,12 @@
     def getNrOfRecords(self, prefix='oai_dc'):
         return len(self._prefixes.get(prefix, []))
 
+    def suspend(self):
+        suspend = Suspend()
+        self._suspended.append(suspend) 
+        yield suspend
+        suspend.getResult()
+
     # private methods
 
     def _add(self, stamp, identifier, setSpecs, prefixes):
@@ -258,6 +268,10 @@
         with open(join(self._directory, "oai.version"), 'w') as f:
             f.write(self.version)
 
+    def _resume(self):
+        while len(self._suspended) > 0:
+            self._suspended.pop().resume()
+
 # helper methods
 
 class RecordId(str):
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/meresco/oai/oailist.py version_1/meresco/oai/oailist.py
--- version_0/meresco/oai/oailist.py	2011-04-12 17:38:52.000000000 +0200
+++ version_1/meresco/oai/oailist.py	2011-04-12 17:40:27.000000000 +0200
@@ -81,10 +81,11 @@
 
     DEFAULT_BATCH_SIZE = 200
 
-    def __init__(self, batchSize=DEFAULT_BATCH_SIZE):
+    def __init__(self, batchSize=DEFAULT_BATCH_SIZE, supportXWait=False):
         self._supportedVerbs = ['ListIdentifiers', 'ListRecords']
         Observable.__init__(self)
         self._batchSize = batchSize
+        self._supportXWait = supportXWait
 
     def listRecords(self, arguments, **httpkwargs):
         yield self._doProcess(arguments, **httpkwargs)
@@ -127,7 +128,10 @@
         validatedArguments = {}
         checkNoRepeatedArguments(arguments)
         arguments.pop('verb')
-        checkArgument(arguments, 'x-wait', validatedArguments)
+        if self._supportXWait:
+            checkArgument(arguments, 'x-wait', validatedArguments)
+            if validatedArguments.get('x-wait', None) not in ['True', None]:
+                raise OaiBadArgumentException("The argument 'x-wait' only supports 'True' as valid value.")
         if checkArgument(arguments, 'resumptionToken', validatedArguments):
             if len(arguments) > 0:
                 raise OaiBadArgumentException('"resumptionToken" argument may only be used exclusively.')
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/meresco/oai/oaipmh.py version_1/meresco/oai/oaipmh.py
--- version_0/meresco/oai/oaipmh.py	2011-04-12 17:38:52.000000000 +0200
+++ version_1/meresco/oai/oaipmh.py	2011-04-12 17:40:27.000000000 +0200
@@ -40,7 +40,7 @@
 from oairecord import OaiRecord
 
 class OaiPmh(object):
-    def __init__(self, repositoryName, adminEmail, repositoryIdentifier=None, batchSize=OaiList.DEFAULT_BATCH_SIZE):
+    def __init__(self, repositoryName, adminEmail, repositoryIdentifier=None, batchSize=OaiList.DEFAULT_BATCH_SIZE, supportXWait=False):
         outside = Transparant() if repositoryIdentifier == None else OaiIdentifierRename(repositoryIdentifier)
         self.addObserver = outside.addObserver
         self.addStrand = outside.addStrand
@@ -50,7 +50,7 @@
                     (OaiIdentify(repositoryName=repositoryName, adminEmail=adminEmail, repositoryIdentifier=repositoryIdentifier), 
                         (outside,)
                     ),
-                    (OaiList(batchSize=batchSize),
+                    (OaiList(batchSize=batchSize, supportXWait=supportXWait),
                         (OaiRecord(),
                             (outside,)
                         )
Only in version_0/meresco/oai: oaisuspend.py
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/test/_alltests.py version_1/test/_alltests.py
--- version_0/test/_alltests.py	2011-04-12 17:38:52.000000000 +0200
+++ version_1/test/_alltests.py	2011-04-12 17:40:27.000000000 +0200
@@ -55,7 +55,7 @@
 from oaiprovenancetest import OaiProvenanceTest
 from oairecordtest import OaiRecordTest
 from oaisetselecttest import OaiSetSelectTest
-from oaisuspendtest import OaiSuspendTest
+from oaiintegrationtest import OaiIntegrationTest
 from oaitooltest import OaiToolTest
 from resumptiontokentest import ResumptionTokenTest
 from updateadaptertest import UpdateAdapterTest
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/test/oaiintegrationtest.py version_1/test/oaiintegrationtest.py
--- version_0/test/oaiintegrationtest.py	1970-01-01 01:00:00.000000000 +0100
+++ version_1/test/oaiintegrationtest.py	2011-04-12 17:40:27.000000000 +0200
@@ -0,0 +1,168 @@
+## begin license ##
+#
+#    Meresco Oai are components to build Oai repositories, based on Meresco
+#    Core and Meresco Components.
+#    Copyright (C) 2010-2011 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
+#
+#    This file is part of Meresco Oai.
+#
+#    Meresco Oai is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    Meresco Oai is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with Meresco Oai; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from os.path import join
+from random import randint
+from threading import Thread
+from time import sleep
+
+from meresco.core import be, Observable
+from meresco.components.http import ObservableHttpServer
+from meresco.components import StorageComponent
+from meresco.oai import OaiPmh, OaiJazz, OaiHarvester
+
+from cq2utils import CQ2TestCase, CallTrace
+from weightless.io import Reactor
+
+from lxml.etree import tostring
+
+class OaiIntegrationTest(CQ2TestCase):
+
+    def testNearRealtimeOai(self):
+        self.run = True
+        portNumber = randint(50000, 60000)
+        observer = CallTrace("observer", ignoredAttributes=["observer_init"])
+        oaiJazz = OaiJazz(join(self.tempdir, 'oai'))
+        storageComponent = StorageComponent(join(self.tempdir, 'storage'))
+        self._addOaiRecords(storageComponent, oaiJazz, 3)
+
+        oaiPmhThread = Thread(None, lambda: self.startOaiPmh(portNumber, oaiJazz, storageComponent))
+        harvestThread = Thread(None, lambda: self.startOaiHarvester(portNumber, observer))
+        oaiPmhThread.start()
+        harvestThread.start()
+
+        requests = 3
+        sleep(1.0 + 1.0 * requests)
+       
+        self.assertEquals(['add'] * requests, [m.name for m in observer.calledMethods])
+        ids = [xpath(m.kwargs['lxmlNode'], '//oai:header/oai:identifier/text()') for m in observer.calledMethods]
+        self.assertEquals([['id0'],['id1'],['id2']], ids)
+
+        self.assertEquals(1, len(oaiJazz._suspended))
+
+        requests += 1
+        storageComponent.add("id3", "prefix", "<a>a3</a>")
+        oaiJazz.addOaiRecord(identifier="id3", sets=[], metadataFormats=[("prefix", "", "")])
+        sleep(0.1)
+
+        self.assertEquals(0, len(oaiJazz._suspended))
+        self.assertEquals(['add'] * requests, [m.name for m in observer.calledMethods])
+        kwarg = tostring(observer.calledMethods[-1].kwargs['lxmlNode'])
+        self.assertTrue("id3" in kwarg, kwarg)
+        sleep(1.0)
+        self.assertEquals(1, len(oaiJazz._suspended))
+
+        self.run = False
+        oaiPmhThread.join()
+        harvestThread.join()
+
+    def testNearRealtimeOaiSavesState(self):
+        observer = CallTrace("observer", ignoredAttributes=["observer_init"])
+        oaiJazz = OaiJazz(join(self.tempdir, 'oai'))
+        storageComponent = StorageComponent(join(self.tempdir, 'storage'))
+        self._addOaiRecords(storageComponent, oaiJazz, 1)
+        
+        oaiPmhThread = None
+        harvestThread = None
+
+        def start():
+            global oaiPmhThread, harvestThread
+            self.run = True
+            portNumber = randint(50000, 60000)
+            oaiPmhThread = Thread(None, lambda: self.startOaiPmh(portNumber, oaiJazz, storageComponent))
+            harvestThread = Thread(None, lambda: self.startOaiHarvester(portNumber, observer))
+            oaiPmhThread.start()
+            harvestThread.start()
+
+        def stop():
+            global oaiPmhThread, harvestThread
+            self.run = False
+            oaiPmhThread.join()
+            oaiPmhThread = None
+            harvestThread.join()
+            harvestThread = None
+
+        start()
+        requests = 1
+        sleep(1.0 + 1.0 * requests)
+        self.assertEquals(1, len(observer.calledMethods))
+        kwarg = tostring(observer.calledMethods[0].kwargs['lxmlNode'])
+        self.assertTrue("id0" in kwarg, kwarg)
+        stop()
+
+        storageComponent.add("id1", "prefix", "<a>a1</a>")
+        oaiJazz.addOaiRecord(identifier="id1", sets=[], metadataFormats=[("prefix", "", "")])
+
+        start()
+        requests = 1
+        sleep(1.0 + 1.0 * requests)
+        self.assertEquals(2, len(observer.calledMethods))
+        kwarg = tostring(observer.calledMethods[1].kwargs['lxmlNode'])
+        self.assertFalse("id0" in kwarg, kwarg)
+        self.assertTrue("id1" in kwarg, kwarg)
+        stop()
+
+    def startOaiHarvester(self, portNumber, observer):
+        reactor = Reactor()
+        server = be(
+            (Observable(),
+                (OaiHarvester(reactor, 'localhost', portNumber, '/', 'prefix', self.tempdir),
+                    (observer,),
+                )
+            )
+        )
+        server.once.observer_init()
+        self._loopReactor(reactor)
+
+    def startOaiPmh(self, portNumber, oaiJazz, storageComponent):
+        reactor = Reactor()
+        server = be(
+            (Observable(),
+                (ObservableHttpServer(reactor, portNumber),
+                    (OaiPmh(repositoryName='repositoryName', adminEmail='adminEmail', batchSize=2, supportXWait=True),
+                        (oaiJazz,),
+                        (storageComponent,)
+                    )
+                )
+            )
+        )
+        server.once.observer_init()
+        self._loopReactor(reactor)
+
+    def _addOaiRecords(self, storageComponent, oaiJazz, count):
+        for i in range(count):            
+            storageComponent.add("id%s" % i, "prefix", "<a>a%s</a>" % i)
+            oaiJazz.addOaiRecord(identifier="id%s" % i, sets=[], metadataFormats=[("prefix", "", "")])
+
+    def _loopReactor(self, reactor):
+        def tick():
+            reactor.addTimer(0.1, tick)
+        tick()
+        while self.run:
+            reactor.step()
+
+def xpath(node, path):
+    return node.xpath(path, namespaces={'oai':'http://www.openarchives.org/OAI/2.0/'})
+
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/test/oaijazztest.py version_1/test/oaijazztest.py
--- version_0/test/oaijazztest.py	2011-04-12 17:38:52.000000000 +0200
+++ version_1/test/oaijazztest.py	2011-04-12 17:40:27.000000000 +0200
@@ -42,6 +42,7 @@
 from lxml.etree import parse
 from meresco.core import Observable, be, Transparant
 from weightless.core import compose
+from weightless.http import Suspend
 
 parseLxml = lambda s: parse(StringIO(s)).getroot()
 
@@ -485,3 +486,31 @@
         self.assertEquals(['123'], list(self.jazz.oaiSelect(prefix='lom')))
         self.assertEquals(['123'], list(self.jazz.oaiSelect(prefix='oai_dc')))
 
+    def testAddSuspendedListRecord(self):
+        suspend = self.jazz.suspend().next()
+        self.assertTrue([suspend], self.jazz._suspended)
+        self.assertEquals(Suspend, type(suspend))
+
+    def testAddOaiRecordResumes(self):
+        reactor = CallTrace("reactor")
+        suspend = self.jazz.suspend().next()
+        resumed = []
+        suspend(reactor, lambda: resumed.append(True))
+
+        self.jazz.addOaiRecord(identifier="identifier", metadataFormats=[('prefix', 'schema', 'namespace')])
+
+        self.assertEquals([True], resumed)
+        self.assertEquals([], self.jazz._suspended)
+
+    def testDeleteResumes(self):
+        self.jazz.addOaiRecord(identifier="identifier", metadataFormats=[('prefix', 'schema', 'namespace')])
+        reactor = CallTrace("reactor")
+        suspend = self.jazz.suspend().next()
+        resumed = []
+        suspend(reactor, lambda: resumed.append(True))
+
+        self.jazz.delete(identifier='identifier')
+
+        self.assertEquals([True], resumed)
+        self.assertEquals([], self.jazz._suspended)
+
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/test/oailisttest.py version_1/test/oailisttest.py
--- version_0/test/oailisttest.py	2011-04-12 17:38:52.000000000 +0200
+++ version_1/test/oailisttest.py	2011-04-12 17:40:27.000000000 +0200
@@ -152,6 +152,8 @@
         self.assertEquals(['noRecordsMatch'], xpath(oai, "/oai:OAI-PMH/oai:error/@code"))
 
     def testListRecordsUsingXWait(self):
+        self.oaiList = OaiList(batchSize=2, supportXWait=True)
+        self.oaiList.addObserver(self.observer)
         self.observer.returnValues['oaiSelect'] = WrapIterable(f for f in [])
 
         result = compose(self.oaiList.listRecords(arguments={'verb':['ListRecords'], 'metadataPrefix': ['oai_dc'], 'x-wait': ['True']}, **self.httpkwargs))
@@ -171,6 +173,23 @@
         recordMethods = self.observer.calledMethods[2:]
         self.assertEquals({'recordId':'id:1&1', 'metadataPrefix':'oai_dc'}, recordMethods[0].kwargs)
 
+    def testNotSupportedXWait(self):
+        self.observer.returnValues['oaiSelect'] = WrapIterable(f for f in ['id:1', 'id:2'])
+        header, body = ''.join(compose(self.oaiList.listRecords(arguments={'verb':['ListRecords'], 'metadataPrefix': ['oai_dc'], 'x-wait': ['True']}, **self.httpkwargs))).split(CRLF*2)
+        oai = parse(StringIO(body))
+
+        self.assertEquals(['badArgument'], xpath(oai, "/oai:OAI-PMH/oai:error/@code"))
+
+    def testNotSupportedValueXWait(self):
+        self.oaiList = OaiList(batchSize=2, supportXWait=True)
+        self.oaiList.addObserver(self.observer)
+        self.observer.returnValues['oaiSelect'] = WrapIterable(f for f in ['id:1', 'id:2'])
+        header, body = ''.join(compose(self.oaiList.listRecords(arguments={'verb':['ListRecords'], 'metadataPrefix': ['oai_dc'], 'x-wait': ['YesPlease']}, **self.httpkwargs))).split(CRLF*2)
+        oai = parse(StringIO(body))
+
+        self.assertEquals(['badArgument'], xpath(oai, "/oai:OAI-PMH/oai:error/@code"))
+        self.assertTrue("only supports 'True' as valid value" in xpath(oai, "/oai:OAI-PMH/oai:error/text()")[0])
+
     def testFromAndUntil(self):
         def selectArguments(oaiFrom, oaiUntil):
             self.observer.returnValues['oaiSelect'] = WrapIterable(f for f in ['id:3&3'])
@@ -213,6 +232,8 @@
         self.assertEquals('badArgument', getError('2000-01-01T00:00:00Z', '1999-01-01T00:00:00Z'))
 
     def testConcurrentListRequestsDontInterfere(self):
+        self.oaiList = OaiList(batchSize=2, supportXWait=True)
+        self.oaiList.addObserver(self.observer)
         self.observer.returnValues['oaiSelect'] = WrapIterable(f for f in [])
 
         # ListRecords request
Only in version_0/test: oaisuspendtest.py
