Changeset created on Thu Jun 07 09:45:37 UTC 2012 by Seecr (Seek You Too B.V.)

Description: introducing OaiSetMask component to allow proper filtering by set

    An OaiSetMask can be used to filter records in OaiJazz by (one or more) OAI-PMH set(s). This new component supersedes the faulty (and now deprecated) OaiSetSelect component that didn't behave as desired in case another set was explicitly specified as an OAI-PMH request parameter.

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-oai/workingsets/4.0.6-Beeld-en-Geluid/version_0

diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/oai/__init__.py /home/jurjanpaul/development/sf/meresco-oai/workingsets/4.0.6-Beeld-en-Geluid/version_1/meresco/oai/__init__.py
--- version_0/meresco/oai/__init__.py	2012-06-06 15:41:52.000000000 +0200
+++ version_1/meresco/oai/__init__.py	2012-06-07 11:45:32.000000000 +0200
@@ -32,7 +32,8 @@
 
 from oaipmh import OaiPmh
 from oaiprovenance import OaiProvenance
-from oaisetselect import OaiSetSelect
+from oaisetmask import OaiSetMask
+from oaisetselect import OaiSetSelect # deprecated
 from oaiidentifierrename import OaiIdentifierRename
 from fields2oairecord import Fields2OaiRecord
 from oaijazz import OaiJazz
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/oai/oaijazz.py /home/jurjanpaul/development/sf/meresco-oai/workingsets/4.0.6-Beeld-en-Geluid/version_1/meresco/oai/oaijazz.py
--- version_0/meresco/oai/oaijazz.py	2012-06-06 15:41:52.000000000 +0200
+++ version_1/meresco/oai/oaijazz.py	2012-06-07 11:45:32.000000000 +0200
@@ -108,18 +108,22 @@
         self._tombStones.append(stamp)
         self._resume()
 
-    def oaiSelect(self, sets=None, prefix='oai_dc', continueAfter='0', oaiFrom=None, oaiUntil=None):
-        sets = [] if sets == None else sets
+    def oaiSelect(self, sets=None, prefix='oai_dc', continueAfter='0', oaiFrom=None, oaiUntil=None, setsMask=None):
+        setsMask = setsMask or []
+        sets = sets or []
         start = max(int(continueAfter)+1, self._fromTime(oaiFrom))
         stop = self._untilTime(oaiUntil)
         stampIds = self._sliceStampIds(self._prefixes.get(prefix, []), start, stop)
+        setsStampIds = dict(
+            (setSpec, self._sliceStampIds(self._sets.get(setSpec, []), start, stop))
+            for setSpec in set(setsMask).union(sets)
+        )
+        if setsMask:
+            stampIds = AndIterator(stampIds,
+                reduce(AndIterator, (setsStampIds[setSpec] for setSpec in setsMask))) 
         if sets:
-            allStampIdsFromSets = (
-                self._sliceStampIds(self._sets.get(setSpec, []), start, stop)
-                for setSpec in sets
-            )
             stampIds = AndIterator(stampIds,
-                reduce(OrIterator, allStampIdsFromSets))
+                reduce(OrIterator, (setsStampIds[setSpec] for setSpec in sets)))
         idAndStamps = ((self._getIdentifier(stampId), stampId) for stampId in stampIds)
         return (RecordId(identifier, stampId) for identifier, stampId in idAndStamps if not identifier is None)
 
Only in version_0/meresco/oai: .oaijazz.py.swp
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/oai/oaisetmask.py /home/jurjanpaul/development/sf/meresco-oai/workingsets/4.0.6-Beeld-en-Geluid/version_1/meresco/oai/oaisetmask.py
--- version_0/meresco/oai/oaisetmask.py	1970-01-01 01:00:00.000000000 +0100
+++ version_1/meresco/oai/oaisetmask.py	2012-06-07 11:45:32.000000000 +0200
@@ -0,0 +1,49 @@
+## begin license ##
+# 
+# "Meresco Oai" are components to build Oai repositories, based on
+# "Meresco Core" and "Meresco Components". 
+# 
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Nederlands Instituut voor Beeld en Geluid  http://www.beeldengeluid.nl
+# 
+# This file is part of "Meresco Oai"
+# 
+# "Meresco Oai" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Oai" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Oai"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
+## end license ##
+
+from meresco.core import Transparent
+
+class OaiSetMask(Transparent):
+    """A setsMask needs to be specified as a list or set of setSpecs. 
+If more than one setSpec is specified (in a single instance or by chaining), 
+the mask takes the form of the intersection of these setSpecs."""
+
+    def __init__(self, setsMask, name=None):
+        Transparent.__init__(self, name=name)
+        self._setsMask = set(setsMask)
+
+    def oaiSelect(self, setsMask=None, *args, **kwargs):
+        return self.call.oaiSelect(setsMask=self._combinedSetsMask(setsMask), *args, **kwargs)
+
+    def getUnique(self, identifier, setsMask=None):
+        sets = self.call.getSets(identifier)
+        if self._combinedSetsMask(setsMask).issubset(sets):
+            return self.call.getUnique(identifier)
+        return None
+
+    def _combinedSetsMask(self, setsMask):
+        return self._setsMask.union(setsMask or [])
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/oai/oaisetselect.py /home/jurjanpaul/development/sf/meresco-oai/workingsets/4.0.6-Beeld-en-Geluid/version_1/meresco/oai/oaisetselect.py
--- version_0/meresco/oai/oaisetselect.py	2012-06-06 15:41:52.000000000 +0200
+++ version_1/meresco/oai/oaisetselect.py	2012-06-07 11:45:32.000000000 +0200
@@ -28,10 +28,12 @@
 # 
 ## end license ##
 
+from warnings import warn
 from meresco.core import Transparent
 
 class OaiSetSelect(Transparent):
     def __init__(self, setsList):
+        warn("OaiSetSelect is deprecated; you probably need OaiSetMask instead.", DeprecationWarning)
         Transparent.__init__(self)
         self._setsList = setsList
 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/_alltests.py /home/jurjanpaul/development/sf/meresco-oai/workingsets/4.0.6-Beeld-en-Geluid/version_1/test/_alltests.py
--- version_0/test/_alltests.py	2012-06-06 15:41:52.000000000 +0200
+++ version_1/test/_alltests.py	2012-06-07 11:45:32.000000000 +0200
@@ -57,6 +57,7 @@
 from oaipmhtest import OaiPmhTest, OaiPmhWithIdentifierTest, HttpPostOaiPmhTest
 from oaiprovenancetest import OaiProvenanceTest
 from oairecordtest import OaiRecordTest
+from oaisetmasktest import OaiSetMaskTest
 from oaisetselecttest import OaiSetSelectTest
 from oaiintegrationtest import OaiIntegrationTest
 from oaitooltest import OaiToolTest
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/oaijazztest.py /home/jurjanpaul/development/sf/meresco-oai/workingsets/4.0.6-Beeld-en-Geluid/version_1/test/oaijazztest.py
--- version_0/test/oaijazztest.py	2012-06-06 15:41:52.000000000 +0200
+++ version_1/test/oaijazztest.py	2012-06-07 11:45:32.000000000 +0200
@@ -392,9 +392,17 @@
     def testGetFromMultipleSets(self):
         self.jazz.addOaiRecord('id1', sets=[('set1', 'set1name')], metadataFormats=[('prefix','schema', 'namespace')])
         self.jazz.addOaiRecord('id2', sets=[('set2', 'set2name')], metadataFormats=[('prefix','schema', 'namespace')])
-        self.jazz.addOaiRecord('id3', sets=[('set3', 'set1name')], metadataFormats=[('prefix','schema', 'namespace')])
+        self.jazz.addOaiRecord('id3', sets=[('set3', 'set3name')], metadataFormats=[('prefix','schema', 'namespace')])
         self.assertEquals(['id1','id2'], list(self.jazz.oaiSelect(sets=['set1','set2'], prefix='prefix')))
 
+    def testSetsMask(self):
+        self.jazz.addOaiRecord('id1', sets=[('set1', 'set1name'), ('set3', 'set3name'), ('set4', 'set4name')], metadataFormats=[('prefix','schema', 'namespace')])
+        self.jazz.addOaiRecord('id2', sets=[('set2', 'set2name'), ('set3', 'set3name')], metadataFormats=[('prefix','schema', 'namespace')])
+        self.jazz.addOaiRecord('id2.1', sets=[('set2', 'set2name')], metadataFormats=[('prefix','schema', 'namespace')])
+        self.assertEquals(['id1', 'id2'], list(self.jazz.oaiSelect(sets=['set1', 'set2'], prefix='prefix', setsMask=set(['set3']))))
+        self.assertEquals(['id1'], list(self.jazz.oaiSelect(sets=['set1', 'set2'], prefix='prefix', setsMask=set(['set3', 'set4']))))
+
+
     def testListRecordsNoResults(self):
         result = self.jazz.oaiSelect(prefix='xxx')
         self.assertEquals([], list(result))
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/oaisetmasktest.py /home/jurjanpaul/development/sf/meresco-oai/workingsets/4.0.6-Beeld-en-Geluid/version_1/test/oaisetmasktest.py
--- version_0/test/oaisetmasktest.py	1970-01-01 01:00:00.000000000 +0100
+++ version_1/test/oaisetmasktest.py	2012-06-07 11:45:32.000000000 +0200
@@ -0,0 +1,91 @@
+## begin license ##
+# 
+# "Meresco Oai" are components to build Oai repositories, based on
+# "Meresco Core" and "Meresco Components". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Oai"
+# 
+# "Meresco Oai" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Oai" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Oai"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
+## end license ##
+
+from seecr.test import SeecrTestCase, CallTrace
+
+from meresco.core import Observable
+from meresco.oai import OaiSetMask
+from weightless.core import be, compose
+
+class OaiSetMaskTest(SeecrTestCase):
+    def setUp(self):
+        SeecrTestCase.setUp(self)
+        self.observer = CallTrace()
+
+        self.dna = be(
+            (Observable(),
+                (OaiSetMask(['set1', 'set2'], name="set1|set2 mask"),
+                    (self.observer,)
+                )
+            )
+        )
+
+    def testOaiSelect(self):
+        self.dna.call.oaiSelect()
+        self.assertEquals(1, len(self.observer.calledMethods))
+        methodCalled = self.observer.calledMethods[0]
+        self.assertEquals(set(['set1', 'set2']), self.observer.calledMethods[0].kwargs['setsMask'])
+
+    def testOaiSelectWithSetsMask(self):
+        self.dna.call.oaiSelect(setsMask=['set3'])
+        self.assertEquals(1, len(self.observer.calledMethods))
+        methodCalled = self.observer.calledMethods[0]
+        self.assertEquals(set(['set1', 'set2', 'set3']), self.observer.calledMethods[0].kwargs['setsMask'])
+
+    def testGetUniqueInSets(self):
+        self.observer.returnValues['getSets'] = ['set1', 'set2', 'set3']
+        self.dna.call.getUnique('xyz')
+        self.assertEquals(['getSets', 'getUnique'], [m.name for m in self.observer.calledMethods])
+        getUniqueCall = self.observer.calledMethods[1]
+        self.assertEquals(('xyz',), getUniqueCall.args)
+
+    def testGetUniqueNotInSets(self):
+        self.observer.returnValues['getSets'] = ['set1']
+        self.dna.call.getUnique('xyz')
+        self.assertEquals(['getSets'], [m.name for m in self.observer.calledMethods])
+
+    def testGetUniqueWithSetsMask(self):
+        self.observer.returnValues['getSets'] = ['set1', 'set2', 'set3']
+        self.dna.call.getUnique('xyz', setsMask=['set3'])
+        self.assertEquals(['getSets', 'getUnique'], [m.name for m in self.observer.calledMethods])
+        getUniqueCall = self.observer.calledMethods[1]
+        self.assertEquals(('xyz',), getUniqueCall.args)
+
+        self.observer.calledMethods.reset()
+        self.observer.returnValues['getSets'] = ['set1', 'set2']
+        self.dna.call.getUnique('xyz', setsMask=['set3'])
+        self.assertEquals(['getSets'], [m.name for m in self.observer.calledMethods])
+
+    def testOtherMethodsArePassed(self):
+        self.observer.methods['getAllMetadataFormats'] = lambda *a, **kw: (x for x in [])
+        list(compose(self.dna.all.getAllMetadataFormats()))
+        self.assertEquals(1, len(self.observer.calledMethods))
+        self.assertEquals('getAllMetadataFormats', self.observer.calledMethods[0].name)
+
