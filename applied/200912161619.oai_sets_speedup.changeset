Changeset created on 2009-12-16 16:19 by Seek You Too

Description: OAI-PMH Performance improvement
    
    For LOREnet we've changed the implementation of sets in the oai components to improve the performance. Having multiple sets in (173 in this case) meant that while returning a record it had to look into each set list if the record was part of that set. This could take up several seconds.

    The new implementation uses a dictionary to state all sets a particular record is a member of. This greatly increased the performance.

This was originally implemented around 2009-11-20

Baseline version: meresco-components/tags/version_2.23.1

diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified --exclude=facetindex version_2.23.1/merescocomponents/berkeleydict.py trunk/merescocomponents/berkeleydict.py
--- version_2.23.1/merescocomponents/berkeleydict.py	1970-01-01 01:00:00.000000000 +0100
+++ trunk/merescocomponents/berkeleydict.py	2009-12-15 14:27:01.000000000 +0100
@@ -0,0 +1,73 @@
+# -*- coding: utf-8 -*-
+## begin license ##
+#
+#    Meresco Components are components to build searchengines, repositories
+#    and archives, based on Meresco Core.
+#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2009 Kennisnet http://www.kennisnet.nl
+#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#    Copyright (C) 2007-2009 Seek You Too (CQ2) http://www.cq2.nl
+#
+#    This file is part of Meresco Components.
+#
+#    Meresco Components is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    Meresco Components is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with Meresco Components; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from bsddb import btopen
+from os.path import join
+
+class BerkeleyDict(object):
+    def __init__(self, directory):
+        self._keyvalueDict = btopen(join(directory, 'keyvalue'))
+
+    def __contains__(self, key):
+        return self._keyvalueDict.__contains__(key)
+
+    def __setitem__(self, key, value):
+        self._keyvalueDict.__setitem__(key, value)
+        self._keyvalueDict.sync()
+
+    def __getitem__(self, key):
+        return self._keyvalueDict.__getitem__(key)
+
+    def __delitem__(self, key):
+        self._keyvalueDict.__delitem__(key)
+        self._keyvalueDict.sync()
+
+    def get(self, key, default=None):
+        return self._keyvalueDict.get(key, default=default)
+
+class DoubleUniqueBerkeleyDict(BerkeleyDict):
+    """Berkeley based dictionary where both key and value must be unique"""
+    def __init__(self, directory):
+        BerkeleyDict.__init__(self, directory)
+        self._valuekeyDict = btopen(join(directory, 'valuekey'))
+
+    def __setitem__(self, key, value):
+        BerkeleyDict.__setitem__(self, key, value)
+        self._valuekeyDict.__setitem__(value, key)
+        self._valuekeyDict.sync()
+
+    def __delitem__(self, key):
+        value = self[key]
+        BerkeleyDict.__delitem__(self, key)
+        self._valuekeyDict.__delitem__(value)
+        self._valuekeyDict.sync()
+
+    def getKeyFor(self, value):
+        return self._valuekeyDict.get(value, None)
+        
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified --exclude=facetindex version_2.23.1/merescocomponents/__init__.py trunk/merescocomponents/__init__.py
--- version_2.23.1/merescocomponents/__init__.py	2009-12-16 14:38:43.000000000 +0100
+++ trunk/merescocomponents/__init__.py	2009-12-15 14:27:01.000000000 +0100
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 ## begin license ##
 #
 #    Meresco Components are components to build searchengines, repositories
@@ -26,3 +27,4 @@
 #
 ## end license ##
 from filelist import SortedFileList, FileList
+from berkeleydict import DoubleUniqueBerkeleyDict, BerkeleyDict
Only in version_2.23.1/merescocomponents/oai: berkeleydict.py
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified --exclude=facetindex version_2.23.1/merescocomponents/oai/fields2oairecord.py trunk/merescocomponents/oai/fields2oairecord.py
--- version_2.23.1/merescocomponents/oai/fields2oairecord.py	2009-12-16 14:38:43.000000000 +0100
+++ trunk/merescocomponents/oai/fields2oairecord.py	2009-12-15 14:26:58.000000000 +0100
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 ## begin license ##
 #
 #    Meresco Components are components to build searchengines, repositories
@@ -40,7 +41,7 @@
 
     def commit(self):
         if self._metadataFormats:
-            identifier = self.resourceManager.tx.locals['id']
+            identifier = self.resourceManager.ctx.tx.locals['id']
             self.resourceManager.do.addOaiRecord(identifier=identifier, sets=self._sets, metadataFormats = self._metadataFormats)
 
     def rollback(self):
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified --exclude=facetindex version_2.23.1/merescocomponents/oai/__init__.py trunk/merescocomponents/oai/__init__.py
--- version_2.23.1/merescocomponents/oai/__init__.py	2009-12-16 14:38:43.000000000 +0100
+++ trunk/merescocomponents/oai/__init__.py	2009-12-15 14:26:58.000000000 +0100
@@ -34,4 +34,3 @@
 from fields2oairecord import Fields2OaiRecordTx
 from oaijazz import OaiJazz
 from oaiaddrecord import OaiAddRecord, OaiAddRecordWithDefaults
-from berkeleydict import BerkeleyDict
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified --exclude=facetindex version_2.23.1/merescocomponents/oai/oaijazz.py trunk/merescocomponents/oai/oaijazz.py
--- version_2.23.1/merescocomponents/oai/oaijazz.py	2009-12-16 14:38:43.000000000 +0100
+++ trunk/merescocomponents/oai/oaijazz.py	2009-12-15 14:26:58.000000000 +0100
@@ -34,33 +34,35 @@
 from time import time, strftime, localtime, mktime, strptime
 from itertools import ifilter, dropwhile, takewhile, chain
 from merescocomponents.sorteditertools import OrIterator, AndIterator, WrapIterable
-from merescocomponents import SortedFileList
+from merescocomponents import SortedFileList, DoubleUniqueBerkeleyDict, BerkeleyDict
 
 from bisect import bisect_left
 
-from berkeleydict import BerkeleyDict
-
 MERGE_TRIGGER = 1000
-class OaiJazz(object):
+SETSPEC_SEPARATOR = ','
 
+class OaiJazz(object):
     def __init__(self, aDirectory):
         self._directory = aDirectory
+        if isdir(join(aDirectory, 'sets')):
+            assert isdir(join(aDirectory, 'identifier2setSpecs')), "This is an old OaiJazz data storage which doesn't have the identifier2setSpecs directory. Please convert manually or rebuild complete data storage."
         isdir(join(aDirectory, 'stamp2identifier')) or makedirs(join(aDirectory,'stamp2identifier'))
+        isdir(join(aDirectory, 'identifier2setSpecs')) or makedirs(join(aDirectory,'identifier2setSpecs'))
         isdir(join(aDirectory, 'sets')) or makedirs(join(aDirectory,'sets'))
         isdir(join(aDirectory, 'prefixes')) or makedirs(join(aDirectory,'prefixes'))
         isdir(join(aDirectory, 'prefixesInfo')) or makedirs(join(aDirectory,'prefixesInfo'))
         self._prefixes = {}
         self._sets = {}
-        self._stamp2identifier = BerkeleyDict(join(self._directory, 'stamp2identifier'))
-        self._tombStones = SortedFileList(join(self._directory, 'tombStones.list'), mergeTrigger=MERGE_TRIGGER)
+        self._stamp2identifier = DoubleUniqueBerkeleyDict(join(self._directory, 'stamp2identifier'))
+        self._tombStones = SortedFileList(join(self._directory, 'tombStones.list'),
+        mergeTrigger=MERGE_TRIGGER)
+        self._identifier2setSpecs = BerkeleyDict(join(self._directory, 'identifier2setSpecs'))
         self._read()
 
-    def close(self):
-        #self._stamp2identifier.close()
-        pass
-
     def addOaiRecord(self, identifier, sets=[], metadataFormats=[]):
         assert [prefix for prefix, schema, namespace in metadataFormats], 'No metadataFormat specified for record with identifier "%s"' % identifier
+        for setSpec, setName in sets:
+            assert SETSPEC_SEPARATOR not in setSpec, 'SetSpec "%s" contains illegal characters' % setSpec
         oldPrefixes, oldSets = self._delete(identifier)
         stamp = self._stamp()
         prefixes = set(prefix for prefix, schema, namespace in metadataFormats)
@@ -117,10 +119,9 @@
         return self._prefixes.keys()
 
     def getSets(self, identifier):
-        stamp = self.getUnique(identifier)
-        if not stamp:
+        if identifier not in self._identifier2setSpecs:
             return []
-        return WrapIterable((setSpec for setSpec, stampIds in self._sets.items() if stamp in stampIds))
+        return self._identifier2setSpecs[identifier].split(SETSPEC_SEPARATOR)
 
     def getPrefixes(self, identifier):
         stamp = self.getUnique(identifier)
@@ -142,6 +143,8 @@
         for prefix in prefixes:
             self._getPrefixList(prefix).append(stamp)
         self._stamp2identifier[str(stamp)]=identifier
+        if setSpecs:
+            self._identifier2setSpecs[identifier] = SETSPEC_SEPARATOR.join(setSpecs) 
 
     def _getAllMetadataFormats(self):
         for prefix in self._prefixes.keys():
@@ -192,10 +195,11 @@
                 if stamp in prefixStamps:
                     oldPrefixes.append(prefix)
                     prefixStamps.remove(stamp)
-            for setSpec, setStamps in self._sets.items():
-                if stamp in setStamps:
-                    oldSets.append(setSpec)
-                    setStamps.remove(stamp)
+            if identifier in self._identifier2setSpecs:
+                oldSets = self._identifier2setSpecs[identifier].split(SETSPEC_SEPARATOR)
+                for setSpec in oldSets:
+                    self._sets[setSpec].remove(stamp)
+                del self._identifier2setSpecs[identifier]
         return oldPrefixes, oldSets
 
     def _read(self):
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified --exclude=facetindex version_2.23.1/merescocomponents/oai/oairecordverb.py trunk/merescocomponents/oai/oairecordverb.py
--- version_2.23.1/merescocomponents/oai/oairecordverb.py	2009-12-16 14:38:43.000000000 +0100
+++ trunk/merescocomponents/oai/oairecordverb.py	2009-12-15 14:26:58.000000000 +0100
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 ## begin license ##
 #
 #    Meresco Components are components to build searchengines, repositories
@@ -64,8 +65,3 @@
         if sets:
             return ''.join('<setSpec>%s</setSpec>' % xmlEscape(setSpec) for setSpec in sets)
         return ''
-
-    def _getPartFromStorage(self, recordId, aPartname):
-        stream = StringIO()
-        self.any.write(stream, recordId, aPartname)
-        return stream.getvalue()
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified --exclude=facetindex version_2.23.1/test/alltests.py trunk/test/alltests.py
--- version_2.23.1/test/alltests.py	2009-12-16 14:38:43.000000000 +0100
+++ trunk/test/alltests.py	2009-12-15 14:26:58.000000000 +0100
@@ -1,4 +1,5 @@
 #!/usr/bin/env python2.5
+# -*- coding: utf-8 -*-
 ## begin license ##
 #
 #    Meresco Components are components to build searchengines, repositories
@@ -41,6 +42,7 @@
 
 from sorteditertoolstest import SortedItertoolsTest
 from filelisttest import FileListTest
+from berkeleydicttest import DoubleUniqueBerkeleyDictTest, BerkeleyDictTest
 from packertest import PackerTest
 
 from facetindex.libfacetindextest import LibFacetIndexTest
@@ -84,7 +87,6 @@
 from oai.oaijazztest import OaiJazzTest
 from oai.oaiaddrecordtest import OaiAddRecordTest
 from oai.oaijazzimplementationstest import OaiJazzImplementationsTest
-from oai.berkeleydicttest import BerkeleyDictTest
 
 from web.webquerytest import WebQueryTest
 
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified --exclude=facetindex version_2.23.1/test/berkeleydicttest.py trunk/test/berkeleydicttest.py
--- version_2.23.1/test/berkeleydicttest.py	1970-01-01 01:00:00.000000000 +0100
+++ trunk/test/berkeleydicttest.py	2009-12-15 14:26:58.000000000 +0100
@@ -0,0 +1,96 @@
+# -*- coding: utf-8 -*-
+## begin license ##
+#
+#    Meresco Components are components to build searchengines, repositories
+#    and archives, based on Meresco Core.
+#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+#    Copyright (C) 2007-2009 Kennisnet http://www.kennisnet.nl
+#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
+#    Copyright (C) 2007-2009 Seek You Too (CQ2) http://www.cq2.nl
+#
+#    This file is part of Meresco Components.
+#
+#    Meresco Components is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    Meresco Components is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with Meresco Components; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+
+from cq2utils import CQ2TestCase
+
+from merescocomponents import DoubleUniqueBerkeleyDict, BerkeleyDict
+
+class BerkeleyDictTestBase(CQ2TestCase):
+    def testInsert(self):
+        self.bdict['1'] = 'some string'
+        self.assertEquals('some string', self.bdict['1'])
+        self.bdict['1'] = 'some other string'
+        self.assertEquals('some other string', self.bdict['1'])
+
+    def testNoneExistingKey(self):
+        try:
+            self.bdict['not']
+            self.fail()
+        except KeyError:
+            pass
+
+    def testDelete(self):
+        self.bdict['1'] = 'a string'
+        self.assertEquals('a string', self.bdict['1'])
+        del self.bdict['1']
+        try:
+            self.bdict['1']
+            self.fail('must not come here')
+        except KeyError:
+            pass
+
+    def testGet(self):
+        self.bdict['1'] = 'some other string'
+
+        self.assertEquals('some other string', self.bdict.get('1', 'something'))
+        self.assertEquals('something', self.bdict.get('2', 'something'))
+
+    def testStopWord(self):
+        self.bdict['the'] = 'an'
+        self.assertEquals('an', self.bdict['the'])
+
+    def testCase(self):
+        self.bdict['The'] = 'De'
+        self.bdict['the'] = 'de'
+        self.assertEquals('De', self.bdict['The'])
+        self.assertEquals('de', self.bdict['the'])
+
+    def testSpaces(self):
+        self.bdict['The one'] = 'De ene'
+        self.assertEquals('De ene', self.bdict['The one'])
+        
+class DoubleUniqueBerkeleyDictTest(BerkeleyDictTestBase):
+    def setUp(self):
+        BerkeleyDictTestBase.setUp(self)
+        self.bdict = DoubleUniqueBerkeleyDict(self.tempdir)
+
+    def testDelete(self):
+        BerkeleyDictTestBase.testDelete(self)
+        self.assertEquals(None, self.bdict.getKeyFor('a string'))
+
+    def testGetKeyFor(self):
+        self.bdict['1'] = 'one'
+        self.bdict['2'] = 'two'
+        self.assertEquals('1', self.bdict.getKeyFor('one'))
+
+class BerkeleyDictTest(BerkeleyDictTestBase):
+    def setUp(self):
+        BerkeleyDictTestBase.setUp(self)
+        self.bdict = BerkeleyDict(self.tempdir)
Only in version_2.23.1/test/oai: berkeleydicttest.py
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified --exclude=facetindex version_2.23.1/test/oai/fields2oairecordtest.py trunk/test/oai/fields2oairecordtest.py
--- version_2.23.1/test/oai/fields2oairecordtest.py	2009-12-16 14:38:43.000000000 +0100
+++ trunk/test/oai/fields2oairecordtest.py	2009-12-15 14:26:54.000000000 +0100
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 ## begin license ##
 #
 #    Meresco Components are components to build searchengines, repositories
@@ -34,7 +35,8 @@
     def testOne(self):
         transaction = CallTrace('Transaction')
         rm = CallTrace('ResourceManager')
-        rm.tx = transaction
+        rm.ctx = CallTrace('ctx')
+        rm.ctx.tx = transaction
         rm.do = rm
         transaction.locals = {'id':'identifier'}
         
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified --exclude=facetindex version_2.23.1/test/oai/oaijazztest.py trunk/test/oai/oaijazztest.py
--- version_2.23.1/test/oai/oaijazztest.py	2009-12-16 14:38:43.000000000 +0100
+++ trunk/test/oai/oaijazztest.py	2009-12-15 14:26:54.000000000 +0100
@@ -32,12 +32,13 @@
 from time import time, mktime, strptime
 
 from merescocomponents.oai import OaiJazz
-from merescocomponents.oai.oaijazz import _flattenSetHierarchy, RecordId
+from merescocomponents.oai.oaijazz import _flattenSetHierarchy, RecordId, SETSPEC_SEPARATOR
 from StringIO import StringIO
 from lxml.etree import parse
 from merescocore.framework import Observable, be, Transparant
 
 from os import listdir
+from shutil import rmtree
 
 class OaiJazzTest(CQ2TestCase):
     def setUp(self):
@@ -60,7 +61,6 @@
 
     def testResultsStored(self):
         self.jazz.addOaiRecord(identifier='oai://1234?34', sets=[], metadataFormats=[('prefix', 'schema', 'namespace')])
-        self.jazz.close()
         myJazz = OaiJazz(self.tempdir)
         recordIds = myJazz.oaiSelect(prefix='prefix')
         self.assertEquals('oai://1234?34', recordIds.next())
@@ -68,7 +68,7 @@
     def xtestPerformanceTestje(self):
         t0 = time()
         lastTime = t0
-        for i in xrange(1,10**4 + 1):
+        for i in xrange(1, 10**4 + 1):
             self.jazz.addOaiRecord('id%s' % i, sets=[('setSpec%s' % ((i / 100)*100), 'setName')], metadataFormats=[('prefix','schema', 'namespace')])
             if i%1000 == 0 and i > 0:
                 tmp = time()
@@ -77,12 +77,17 @@
         t1 = time()
         ids = self.jazz.oaiSelect(sets=['setSpec9500'],prefix='prefix')
         firstId = ids.next()
+        allids = [firstId]
         t2 = time()
-        self.assertEquals(99, len(list(ids)))
+        allids.extend(list(ids))
+        self.assertEquals(100, len(allids))
         t3 = time()
-        jazz = OaiJazz(self.tempdir)
+        for identifier in allids:
+            list(self.jazz.getSets(identifier))
         t4 = time()
-        print t1 - t0, t2 - t1, t3 -t2, t3 -t1, t4 - t3
+        jazz = OaiJazz(self.tempdir)
+        t5 = time()
+        print t1 - t0, t2 - t1, t3 -t2, t3 -t1, t4 - t3, t5 - t4
         # a set form 10 million records costs 3.9 seconds (Without any efficiency things applied
         # it costs 0.3 seconds with 1 million records
         # retimed it at 2009-01-13:
@@ -94,7 +99,14 @@
         # New implementation with LuceneDict and SortedFileList with delete support
         #  insert of 10*4 took 153 secs
         #  oaiSelect took 0.1285
-
+        # 2009-11-18: new implementation of lookup of sets for an identifier (getSets) using
+        # berkeleydict.
+        # previous getSets(id) for 100 identifiers took 1.10 secs
+        # after getSets(id) for 100 identifiers took 0.004 secs
+        # penalty on insertion of 10.000 records previous 22 secs, after 27 secs
+        # Same test but with 100.000 records (ulimit must be increased)
+        # 285.413653135 0.240143060684 0.0137410163879 0.253884077072 0.00416588783264 0.167983055115
+        # 237.773926973 0.240620851517 0.0134921073914 0.254112958908 14.3589520454 0.160785913467
 
     def testGetDatestamp(self):
         self.jazz.addOaiRecord('123', metadataFormats=[('oai_dc', 'schema', 'namespace')])
@@ -127,13 +139,11 @@
 
     def testAddOaiRecordPersistent(self):
         self.jazz.addOaiRecord('42', metadataFormats=[('prefix','schema', 'namespace')], sets=[('setSpec', 'setName')])
-        self.jazz.close()
         jazz2 = OaiJazz(self.tempdir)
         self.assertEquals(['42'], list(jazz2.oaiSelect(prefix='prefix', sets=['setSpec'])))
 
     def testWeirdSetOrPrefixNamesDoNotMatter(self):
         self.jazz.addOaiRecord('42', metadataFormats=[('/%^!@#$   \n\t','schema', 'namespace')], sets=[('set%2Spec\n\n', 'setName')])
-        self.jazz.close()
         jazz2 = OaiJazz(self.tempdir)
         self.assertEquals(['42'], list(jazz2.oaiSelect(prefix='/%^!@#$   \n\t', sets=['set%2Spec\n\n'])))
 
@@ -189,4 +199,17 @@
         self.jazz.delete('id1')
         self.assertEquals(2, self.jazz.getNrOfRecords('aPrefix'))
         
+    def testIllegalSetRaisesException(self):
+        # XSD: http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd
+        # according to the xsd the setSpec should conform to:
+        # ([A-Za-z0-9\-_\.!~\*'\(\)])+(:[A-Za-z0-9\-_\.!~\*'\(\)]+)*
+        #
+        # we will only check that a , (comma) is not used.
+        self.assertEquals(',', SETSPEC_SEPARATOR)
+        self.assertRaises(AssertionError, lambda: self.jazz.addOaiRecord('42', metadataFormats=[('prefix','schema', 'namespace')], sets=[('setSpec,', 'setName')]))
         
+    def testConversionNeeded(self):
+        self.jazz.addOaiRecord('42', metadataFormats=[('prefix','schema', 'namespace')], sets=[('setSpec', 'setName')])
+        rmtree(join(self.tempdir, 'identifier2setSpecs'))
+        self.assertRaises(AssertionError, lambda: OaiJazz(self.tempdir))
+        
\ No newline at end of file
