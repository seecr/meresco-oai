#!/usr/bin/env python
## begin license ##
#
# "Meresco Oai" are components to build Oai repositories, based on
# "Meresco Core" and "Meresco Components".
#
# Copyright (C) 2017 SURFmarket https://surf.nl
# Copyright (C) 2017 Seecr (Seek You Too B.V.) http://seecr.nl
#
# This file is part of "Meresco Oai"
#
# "Meresco Oai" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Meresco Oai" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Meresco Oai"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

from lucene import initVM
initVM()
from meresco_oai import initVM
initVM()


from seecrdeps import includeParentAndDeps  # DO_NOT_DISTRIBUTE
includeParentAndDeps(__file__)              # DO_NOT_DISTRIBUTE

from os.path import isdir, join
from os import makedirs
from lxml.etree import tostring
from meresco.oai.tools import iterateOaiPmh
from meresco.components import ParseArguments


def main(baseurl, metadataPrefix, outputDir, set=None):

    if not isdir(outputDir):
        makedirs(outputDir)

    for oaiItem in iterateOaiPmh(baseurl=baseurl, metadataPrefix=metadataPrefix, set=set):
        filename = oaiItem.identifier.replace("/", "_")
        with open(join(outputDir, filename), "wb") as fp:
            fp.write(tostring(oaiItem.record, pretty_print=True))
        print("harvested ", oaiItem.identifier)

if __name__ == '__main__':
    parser = ParseArguments()
    parser.addOption('', '--baseurl', help='Repository Base URL', mandatory=True)
    parser.addOption('', '--metadataPrefix', help='Metadata Prefix to fetch', mandatory=True)
    parser.addOption('', '--set', help='Set to fetch')
    parser.addOption('', '--outputDir', help='Directory to dump records to', mandatory=True)

    options, arguments = parser.parse()

    main(**vars(options))

