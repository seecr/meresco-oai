#!/usr/bin/env python
# -*- coding: utf-8 -*-
## begin license ##
#
# "Meresco Oai" are components to build Oai repositories, based on
# "Meresco Core" and "Meresco Components".
#
# Copyright (C) 2014 Netherlands Institute for Sound and Vision http://instituut.beeldengeluid.nl/
# Copyright (C) 2014-2015 Seecr (Seek You Too B.V.) http://seecr.nl
# Copyright (C) 2015 Koninklijke Bibliotheek (KB) http://www.kb.nl
#
# This file is part of "Meresco Oai"
#
# "Meresco Oai" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Meresco Oai" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Meresco Oai"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

from seecrdeps import includeParentAndDeps       #DO_NOT_DISTRIBUTE
includeParentAndDeps(__file__)                   #DO_NOT_DISTRIBUTE

from meresco.oai import OaiJazz
from meresco.oai.oaijazz import IDENTIFIER_FIELD, PREFIX_FIELD, SETS_FIELD, STAMP_FIELD, NUMERIC_STAMP_FIELD, TOMBSTONE_FIELD, TOMBSTONE_VALUE, HASH_FIELD, Partition

import sys
from os.path import join

Long = NumericRangeQuery = MatchAllDocsQuery = OaiSortingCollector = _stampFromDocument = getLucene = \
    Document = StringField = Field =  LongField = NumericDocValuesField = Term = MultiFields = Bits = IntField = None
def do_import():
    from meresco.oai.oaijazz import getLucene, lazyImport, _stampFromDocument
    lazyImport()
    from org.apache.lucene.document import Document, StringField, Field, LongField, NumericDocValuesField, IntField
    from org.meresco.oai import OaiSortingCollector
    from org.apache.lucene.search import MatchAllDocsQuery, NumericRangeQuery
    from org.apache.lucene.index import Term, MultiFields
    from org.apache.lucene.util import Bits
    from java.lang import Long
    globals().update(locals())

def convertDoc(oldDoc):

    identifier = oldDoc.getField(IDENTIFIER_FIELD).stringValue()
    # oldDoc.add(IntField(HASH_FIELD, Partition.hashId(identifier), Field.Store.NO))
    # return identifier, oldDoc

    doc = Document()
    doc.add(StringField(IDENTIFIER_FIELD, identifier, Field.Store.YES))
    doc.add(IntField(HASH_FIELD, Partition.hashId(identifier), Field.Store.NO))
    for oldPrefix in oldDoc.getValues(PREFIX_FIELD):
        doc.add(StringField(PREFIX_FIELD, oldPrefix, Field.Store.YES))
    for oldSet in oldDoc.getValues(SETS_FIELD):
        doc.add(StringField(SETS_FIELD, oldSet, Field.Store.YES))
    stamp = _stampFromDocument(oldDoc)
    doc.add(LongField(STAMP_FIELD, long(stamp), Field.Store.YES))
    doc.add(NumericDocValuesField(NUMERIC_STAMP_FIELD, long(stamp)))
    isDeleted = oldDoc.getField(TOMBSTONE_FIELD) is not None
    if isDeleted:
        doc.add(StringField(TOMBSTONE_FIELD, TOMBSTONE_VALUE, Field.Store.YES))
    return identifier, doc

def convert(path):
    writer, reader, searcher = getLucene(path)
    total = reader.numDocs()
    maxDoc = reader.maxDoc()
    batchSize = 1000 if maxDoc < 10**6 else 10000
    batches = maxDoc // batchSize + 1
    print 'Nr of documents to be converted:', total
    livebits = MultiFields.getLiveDocs(reader) # may return None
    if livebits is None:
        livebits = Bits.MatchAllBits(maxDoc)
    for i in xrange(maxDoc):
        if i % batchSize == 0:
            print 'Batch {0}/{1}'.format(i // batchSize + 1, batches)
        if not livebits.get(i):
            continue
        doc = reader.document(i)
        identifier, newDoc = convertDoc(doc)
        writer.updateDocument(Term(IDENTIFIER_FIELD, identifier), newDoc)
    writer.close()

def main():
    from optparse import OptionParser
    vprev = str(int(OaiJazz.version) -1)
    parser = OptionParser(usage="%prog [options] <OAI Directory>", description="Converts oai from version {0} to {1}".format(vprev, OaiJazz.version))
    parser.add_option('', '--inplace', dest='backupCreated', default=False, action='store_true', help='Convert the oai-director in place.')
    parser.add_option('', '--i-know-what-i-am-doing', dest='backupCreated', default=False, action='store_true', help='Sure!')
    parser.add_option('', '--backup-created', dest='backupCreated', default=False, action='store_true', help='You have created a backup and will now convert the oai in place.')
    options, arguments = parser.parse_args()
    if len(arguments) != 1 or not options.backupCreated:
        parser.print_help()
        exit(1)
    directory = arguments[0]
    versionFile = join(directory, 'oai.version')
    version = open(versionFile).read()
    assert version == vprev, repr(version)
    assert OaiJazz.version == '9', repr(OaiJazz.version)
    do_import()
    convert(directory)
    open(versionFile, 'w').write(OaiJazz.version)
    print "Finished converting {0} to OAI data format v{1} to v{2}.".format(directory, vprev, OaiJazz.version)

if __name__ == '__main__':
    main()

