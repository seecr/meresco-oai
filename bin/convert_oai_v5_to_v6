#!/usr/bin/env python
# -*- coding: utf-8 -*-
## begin license ##
#
# "Meresco Oai" are components to build Oai repositories, based on
# "Meresco Core" and "Meresco Components".
#
# Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
# Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
# Copyright (C) 2013 Seecr (Seek You Too B.V.) http://seecr.nl
# Copyright (C) 2013 Stichting Bibliotheek.nl (BNL) http://www.bibliotheek.nl
#
# This file is part of "Meresco Oai"
#
# "Meresco Oai" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Meresco Oai" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Meresco Oai"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

from os import system                             #DO_NOT_DISTRIBUTE
from sys import path as sysPath                   #DO_NOT_DISTRIBUTE
system('find .. -name "*.pyc" | xargs rm -f')     #DO_NOT_DISTRIBUTE
                                                  #DO_NOT_DISTRIBUTE
from glob import glob                             #DO_NOT_DISTRIBUTE
for path in glob('../deps.d/*'):                  #DO_NOT_DISTRIBUTE
    sysPath.insert(0, path)                       #DO_NOT_DISTRIBUTE
sysPath.insert(0,'..')                            #DO_NOT_DISTRIBUTE

import sys
from os.path import join, isfile, isdir
from os import makedirs, listdir, rename, removedirs, remove

from lucene import initVM
initVM()

from org.apache.lucene.document import StringField, Field, Document, NumericDocValuesField, LongField, StoredField
from org.apache.lucene.search import MatchAllDocsQuery, Sort, SortField
from org.apache.lucene.index import IndexWriterConfig, IndexWriter
from org.apache.lucene.search import IndexSearcher
from org.apache.lucene.util import BytesRef
from org.apache.lucene.util import Version
from org.apache.lucene.analysis.core import WhitespaceAnalyzer
from org.apache.lucene.store import FSDirectory
from org.apache.lucene.index.sorter import SortingMergePolicy, NumericDocValuesSorter
from java.io import File

def _getLucene(path):
    directory = FSDirectory.open(File(path))
    analyzer = WhitespaceAnalyzer(Version.LUCENE_43)
    config = IndexWriterConfig(Version.LUCENE_43, analyzer)
    writer = IndexWriter(directory, config)
    reader = writer.getReader()
    searcher = IndexSearcher(reader)
    return writer, reader, searcher

def _getNewLucene(path):
    directory = FSDirectory.open(File(path))
    analyzer = WhitespaceAnalyzer(Version.LUCENE_43)
    config = IndexWriterConfig(Version.LUCENE_43, analyzer)
    mergePolicy = config.getMergePolicy()
    sortingMergePolicy = SortingMergePolicy(mergePolicy, NumericDocValuesSorter("stamp", True))
    config.setMergePolicy(sortingMergePolicy)
    writer = IndexWriter(directory, config)
    reader = writer.getReader()
    searcher = IndexSearcher(reader)
    return writer, reader, searcher

def convert(path):
    writer, reader, searcher = _getLucene(path)
    newTempDir = join(path, 'tempNew')
    if isdir(newTempDir):
        print "Previous convert failed. Please remove %s" % newTempDir
        exit(1)
    makedirs(newTempDir)
    writerNew, _, _ = _getNewLucene(newTempDir)
    maxDoc = reader.maxDoc()

    scoreDocs = []
    total = 0
    if maxDoc:
        topDocs = searcher.search(MatchAllDocsQuery(), maxDoc, Sort(SortField("stamp", SortField.Type.LONG)))
        total = topDocs.totalHits
        scoreDocs = topDocs.scoreDocs

    print "About to convert %s documents" % total

    for i, hit in enumerate(scoreDocs):
        if i % 1000 == 0:
            print "%s" % (total - i)
        document = searcher.doc(hit.doc)
        identifier = document.get("identifier")
        newStamp = document.getField("stamp").numericValue().longValue()
        prefixes = document.getValues("prefix")
        fullSetSpecs = document.getValues("sets")
        tombstone = document.get("thumbstone") == 'True'

        doc = Document()
        doc.add(StringField("identifier", identifier, Field.Store.YES))
        doc.add(LongField("stamp", long(newStamp), Field.Store.YES))
        doc.add(NumericDocValuesField("stamp", long(newStamp)))
        for prefix in prefixes:
            doc.add(StringField("prefix", prefix, Field.Store.YES))
        for fullSetSpec in fullSetSpecs:
            doc.add(StringField("sets", fullSetSpec, Field.Store.YES))
        if tombstone:
            doc.add(StoredField("tombstone", BytesRef()))
        writerNew.addDocument(doc)
    writerNew.commit()
    writerNew.close()

    writer.close()

    for f in listdir(path):
        if isfile(join(path, f)) and f != 'data.json':
            remove(join(path, f))
    for f in listdir(newTempDir):
        rename(join(newTempDir, f), join(path, f))
    removedirs(newTempDir)


def main():
    if len(sys.argv) != 2:
        print 'Usage: %s [OAI directory]' % sys.argv[0]
        exit(1)
    directory = sys.argv[1]
    versionFile = join(directory, 'oai.version')
    version = open(versionFile).read()
    assert version == '5', repr(version)
    convert(directory)
    open(versionFile, 'w').write('6')
    print "Finished converting %s to OAI data format v6." % directory

if __name__ == '__main__':
    main()

