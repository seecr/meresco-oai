Changeset created on Mon Oct 18 11:48:25 CEST 2010 by Seek You Too

Description: Oai Harvester state directory is created when absent

    When the configured state directory (workingDir) does not exist yet
    it is now created for you (including parent directories).
    The Oai Harvester now has the same behaviour as similar meresco
    components which keep state in a configured directory.

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-oai/workingsets/3.3-Edurep/version_0

diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/oai/oaiharvester.py version_1/meresco/oai/oaiharvester.py
--- version_0/meresco/oai/oaiharvester.py	2010-10-18 10:36:09.000000000 +0200
+++ version_1/meresco/oai/oaiharvester.py	2010-10-18 11:45:53.000000000 +0200
@@ -29,7 +29,8 @@
 from lxml.etree import parse
 from StringIO import StringIO
 from traceback import format_exc
-from os.path import join, isfile
+from os import makedirs
+from os.path import join, isfile, isdir
 
 from meresco.core import Observable
 from weightless import compose
@@ -45,6 +46,7 @@
         self._port = port 
         self._path = path
         self._prefix = metadataPrefix
+        isdir(workingDir) or makedirs(workingDir)
         self._xWait = xWait
         self._stateFilePath = join(workingDir, "harvester.state")
 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/oaiharvestertest.py version_1/test/oaiharvestertest.py
--- version_0/test/oaiharvestertest.py	2010-10-18 10:36:07.000000000 +0200
+++ version_1/test/oaiharvestertest.py	2010-10-18 11:45:53.000000000 +0200
@@ -226,10 +226,12 @@
         open(harvester._stateFilePath, 'w').write("invalid")
         self.assertEquals("", harvester._readState())
 
-    def getHarvester(self, host, port, path, metadataPrefix, xWait=True):
+    def getHarvester(self, host, port, path, metadataPrefix, workingDir=None, xWait=True):
+        if workingDir == None:
+            workingDir = join(self.tempdir, 'harvesterstate')
         self._err = StringIO()
         self._reactor = CallTrace("reactor")
-        self._harvester = OaiHarvester(self._reactor, host, port, path, metadataPrefix, self.tempdir, xWait=xWait)
+        self._harvester = OaiHarvester(self._reactor, host, port, path, metadataPrefix, workingDir=workingDir, xWait=xWait)
         self._harvester._logError = lambda s: self._err.write(s + '\n')
         self._observer = CallTrace("observer")
         self._harvester.addObserver(self._observer)
