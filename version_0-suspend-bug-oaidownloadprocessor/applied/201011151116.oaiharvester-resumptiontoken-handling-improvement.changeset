Changeset created on Mon Nov 15 11:16:33 CET 2010 by Seek You Too

Description: OaiHarvester resumptionToken handling improvement

    The OaiHarvester read the resumptionToken too literally from file,
    which inhibited manual editing - newlines are now stripped.
    Url-encoding is used when using the resumptionToken to allow for
    unusual characters in an Oai-request.

Baseline version: meresco-oai/workingsets/3.3-Edurep/version_6

diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6/meresco/oai/oaiharvester.py version_7/meresco/oai/oaiharvester.py
--- version_6/meresco/oai/oaiharvester.py	2010-11-12 16:47:09.000000000 +0100
+++ version_7/meresco/oai/oaiharvester.py	2010-11-15 11:15:04.000000000 +0100
@@ -30,8 +30,10 @@
 from traceback import format_exc
 from os import makedirs, close, remove
 from os.path import join, isfile, isdir
+from urllib import urlencode
 
 from meresco.core import Observable
+from meresco.components.http.utils import CRLF
 from weightless import compose
 
 from sys import stderr, stdout
@@ -91,6 +93,7 @@
             try:
                 response = ''.join(responses)
                 headers, body = response.split("\r\n\r\n")
+                self._assertStatusOk(headers, body)
                 lxmlNode = parse(StringIO(body))
                 errors = xpath(lxmlNode, "/oai:OAI-PMH/oai:error")
                 if len(errors) > 0:
@@ -110,26 +113,43 @@
             except Exception:
                 self._logError(format_exc())
             finally:
-                open(self._stateFilePath, 'w').write("Resumptiontoken: %s" % resumptionToken)
+                self._writeState(resumptionToken)
                 alwaysReadable.cleanUp()
             self._reactor.addTimer(1, self._loop.next)
             yield
 
+    def _writeState(self, resumptionToken):
+        open(self._stateFilePath, 'w').write("%s%s" % (RESUMPTIONTOKEN_STATE, resumptionToken))
+
     def _readState(self):
-        state = []
-        if isfile(self._stateFilePath):
-            state = open(self._stateFilePath).read().split("Resumptiontoken: ")
-        return state[1] if len(state)  == 2 else "" 
+        if not isfile(self._stateFilePath):
+            return ''
+        state = open(self._stateFilePath).read()
+        if not RESUMPTIONTOKEN_STATE in state:
+            return ""
+        return state.split(RESUMPTIONTOKEN_STATE)[-1].strip()
 
     def _buildRequest(self, resumptionToken):
-        request = LISTRECORDS % self._path
+        arguments = [('verb', 'ListRecords')]
         if resumptionToken:
-            request += "&resumptionToken=%s" % resumptionToken
+            arguments.append(('resumptionToken', resumptionToken))
         else:
-            request += "&metadataPrefix=%s" % self._prefix
+            arguments.append(('metadataPrefix', self._prefix))
         if self._xWait:
-            request += "&x-wait=True"
-        return STATUSLINE % request
+            arguments.append(('x-wait', 'True'))
+        statusline = "GET %s?%s HTTP/1.0\r\n\r\n"
+        return statusline % (self._path, urlencode(arguments))
+
+    def _assertStatusOk(self, headers, body):
+        statusLine = headers.split(CRLF)[0]
+        statusCode = statusLine.split()[1]
+        if statusCode != '200':
+            error = """Unexpected response from OAI server "%s:%s%s". Response was:\n""" % (self._host, self._port, self._path)
+            error += "-"*70
+            error += "\n%s\n\n%s\n" % (headers, body)
+            error += "-"*70
+            raise ValueError(error)
+
 
     def _tryConnect(self):
         sok = socket()
@@ -179,5 +199,4 @@
 def xpath(node, path):
     return node.xpath(path, namespaces=namespaces)
 
-STATUSLINE = "GET %s HTTP/1.0\r\n\r\n"
-LISTRECORDS = "%s?verb=ListRecords"
+RESUMPTIONTOKEN_STATE = "Resumptiontoken: "
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6/test/oaiharvestertest.py version_7/test/oaiharvestertest.py
--- version_6/test/oaiharvestertest.py	2010-11-12 16:47:09.000000000 +0100
+++ version_7/test/oaiharvestertest.py	2010-11-15 11:15:04.000000000 +0100
@@ -95,6 +95,23 @@
         except TypeError, e:
             self.assertEquals("an integer is required", str(e))
 
+    def testErrorResponse(self):
+        reactor = CallTrace("reactor")
+        with server(['HTTP 400 Error\r\n\r\nIllegal Request']) as (port, msgs):
+            harvester, observer, reactor = self.getHarvester("localhost", port, "/oai", 'dc')
+            callback = reactor.calledMethods[0].args[1]
+            callback() # connect
+            callback = reactor.calledMethods[1].args[1]
+            callback() # HTTP GET
+            sleep(0.01)
+            callback = reactor.calledMethods[3].args[1]
+            callback() # sok.recv
+
+            callback() # yield After Error 
+
+            self.assertTrue('400' in self._err.getvalue(), self._err.getvalue())
+            self.assertEquals(0, len(observer.calledMethods))
+
     def testInvalidPortConnectionRefused(self):
         harvester, observer, reactor = self.getHarvester("localhost", 88, "/oai", 'dc')
         callback = reactor.calledMethods[0].args[1]
@@ -187,11 +204,11 @@
             self.assertEquals(['add'], [m.name for m in observer.calledMethods])
             callback() # removeReader() after self.do.add(...
             self.assertEquals('addTimer', reactor.calledMethods[-1].name)
-            self.assertEquals('Resumptiontoken: xyz', open(self._harvester._stateFilePath).read())
+            self.assertEquals('Resumptiontoken: x?y&z', open(self._harvester._stateFilePath).read())
             callback() # (re)connect
             callback() # HTTP GET
             sleep(0.01)
-            self.assertEquals("GET /oai?verb=ListRecords&resumptionToken=xyz&x-wait=True HTTP/1.0\r\n\r\n", msgs[1])
+            self.assertEquals("GET /oai?verb=ListRecords&resumptionToken=x%3Fy%26z&x-wait=True HTTP/1.0\r\n\r\n", msgs[1])
             callback() # sok.recv
             callback() # sok.recv == ''
             callback() # removeReader() after self.do.add(...
@@ -207,13 +224,13 @@
             callback() # sok.recv
             callback() # sok.recv == ''
             callback() # removeReader() after self.do.add(...
-            self.assertEquals('Resumptiontoken: xyz', open(self._harvester._stateFilePath).read())
+            self.assertEquals('Resumptiontoken: x?y&z', open(self._harvester._stateFilePath).read())
         with server([LISTRECORDS_RESPONSE % RESUMPTION_TOKEN]) as (port, msgs):
             harvester, observer, reactor = self.getHarvester('localhost', port, '/oai', 'dc')
             callback = self.doConnect()
             callback() # HTTP GET
             sleep(0.01)
-            self.assertEquals("GET /oai?verb=ListRecords&resumptionToken=xyz&x-wait=True HTTP/1.0\r\n\r\n", msgs[0])
+            self.assertEquals("GET /oai?verb=ListRecords&resumptionToken=x%3Fy%26z&x-wait=True HTTP/1.0\r\n\r\n", msgs[0])
 
     def testKeepResumptionTokenOnInvalidResponse(self):
         with server([LISTRECORDS_RESPONSE % RESUMPTION_TOKEN, STATUSLINE + 'not XML']) as (port, msgs):
@@ -225,20 +242,20 @@
             callback() # sok.recv
             callback() # soc.recv == ''
             callback() # removeReader() after self.do.add(...
-            self.assertEquals('Resumptiontoken: xyz', open(self._harvester._stateFilePath).read())
+            self.assertEquals('Resumptiontoken: x?y&z', open(self._harvester._stateFilePath).read())
             callback() # (re)connect
             callback() # HTTP GET
             sleep(0.01)
-            self.assertEquals("GET /oai?verb=ListRecords&resumptionToken=xyz&x-wait=True HTTP/1.0\r\n\r\n", msgs[-1])
+            self.assertEquals("GET /oai?verb=ListRecords&resumptionToken=x%3Fy%26z&x-wait=True HTTP/1.0\r\n\r\n", msgs[-1])
             callback() # sok.recv
             callback() # sok.recv == ''
             callback() # removeReader() after self.do.add(...
             self.assertTrue("XMLSyntaxError: Start tag expected, '<' not found, line 1, column 1" in self._err.getvalue(), self._err.getvalue())
-            self.assertEquals('Resumptiontoken: xyz', open(self._harvester._stateFilePath).read())
+            self.assertEquals('Resumptiontoken: x?y&z', open(self._harvester._stateFilePath).read())
             callback() # (re)connect
             callback() # HTTP GET
             sleep(0.01)
-            self.assertEquals("GET /oai?verb=ListRecords&resumptionToken=xyz&x-wait=True HTTP/1.0\r\n\r\n", msgs[-1])
+            self.assertEquals("GET /oai?verb=ListRecords&resumptionToken=x%3Fy%26z&x-wait=True HTTP/1.0\r\n\r\n", msgs[-1])
 
     def testReadResumptionTokenFromState(self):
         harvester, observer, reactor = self.getHarvester("localhost", 99999, "/", "prefix")
@@ -246,6 +263,12 @@
         open(harvester._stateFilePath, 'w').write("Resumptiontoken: %s" % resumptionToken)
         self.assertEquals(resumptionToken, harvester._readState())
 
+    def testReadResumptionTokenFromStateWithNewline(self):
+        harvester, observer, reactor = self.getHarvester("localhost", 99999, "/", "prefix")
+        resumptionToken = "u|c1286437597991025|mprefix|s|f"
+        open(harvester._stateFilePath, 'w').write("Resumptiontoken: %s\n" % resumptionToken)
+        self.assertEquals(resumptionToken, harvester._readState())
+
     def testReadResumptionTokenWhenNoState(self):
         harvester, observer, reactor = self.getHarvester("localhost", 99999, "/", "prefix")
         self.assertEquals("", harvester._readState())
@@ -314,5 +337,5 @@
  
 RESUMPTION_TOKEN = """<resumptionToken expirationDate="2002-06-01T23:20:00Z" 
       completeListSize="6" 
-      cursor="0">xyz</resumptionToken>"""
+      cursor="0">x?y&amp;z</resumptionToken>"""
 
